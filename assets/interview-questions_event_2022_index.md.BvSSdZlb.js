import{_ as p,o as t,c as o,J as e,w as i,m as a,a as r,aa as l,E as n}from"./chunks/framework.DJCjJe2w.js";const j=JSON.parse('{"title":"2022 年前端大事记","description":"","frontmatter":{"createTime":"2023/01/10","tag":"新事件"},"headers":[],"relativePath":"interview-questions/event/2022/index.md","filePath":"interview-questions/event/2022/index.md","lastUpdated":1673319367000}'),d={name:"interview-questions/event/2022/index.md"},b=a("h1",{id:"_2022-年前端大事记",tabindex:"-1"},[r("2022 年前端大事记 "),a("a",{class:"header-anchor",href:"#_2022-年前端大事记","aria-label":'Permalink to "2022 年前端大事记"'},"​")],-1),m=l(`<h2 id="_1-11-chrome-开始实施私有网络控制策略" tabindex="-1">[1-11] Chrome 开始实施私有网络控制策略 <a class="header-anchor" href="#_1-11-chrome-开始实施私有网络控制策略" aria-label="Permalink to &quot;\\[1-11\\] Chrome 开始实施私有网络控制策略&quot;">​</a></h2><p>私有网络请求指的是目标服务器的 <code>IP</code> 地址比请求发起者获取的 IP 地址更私密的请求。例如，从公共网站 (<code>https://www.douyin.com</code>) 到内网网站 (<code>http://argus.bytedance.net</code>) 的请求，或从内网网站到 <code>localhost</code> 的请求。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcb6a8f4fdf64c969f3c304e7d86cb0e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>据 <code>Chrome</code> 统计，有数十万人遭受了针对私有网络的攻击，简单说，就是你打开一个公共的网站，这个网站里会去请求你内网里的地址，然后窃取信息。基于此类问题，<code>Chrome</code> 提出了私有网络控制策略，此策略会限制网站向私有网络上的服务器发送请求的能力。</p><p>你必须要部署下面两个 Header，否则所有私有网络访问都会失败：</p><ul><li><code>Request</code>： Access-Control-Request-Private-Network: true</li><li><code>Resonse</code>：Access-Control-Allow-Private-Network: true</li></ul><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247491913%26idx%3D1%26sn%3D2bb0a28358c02a8ec1832781205df72c%26chksm%3Dc2e11462f5969d74fac277131e1ba8c417ec86754b2f1b2dbe8e238ca27d5c2eaebe602ec803%26token%3D1851580176%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247491913&amp;idx=1&amp;sn=2bb0a28358c02a8ec1832781205df72c&amp;chksm=c2e11462f5969d74fac277131e1ba8c417ec86754b2f1b2dbe8e238ca27d5c2eaebe602ec803&amp;token=1851580176&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">Chrome 重大更新，CORS 增加了两个新的请求头？</a></li></ul><h2 id="_1-21-vue-3-成为新的默认版本" tabindex="-1">[1-21] Vue 3 成为新的默认版本 <a class="header-anchor" href="#_1-21-vue-3-成为新的默认版本" aria-label="Permalink to &quot;\\[1-21\\] Vue 3 成为新的默认版本&quot;">​</a></h2><p><code>Vue 3</code> 在 <code>2022</code> 年 2 月 7 日 成为新的默认版本！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67e77b72027645a28df392d036edd0d2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>除了 <code>Vue</code> 核心库以外，还几乎改进了框架的每个方面。</p><ul><li>基于 <code>Vite</code> 的极速构建工具链</li><li><code>&lt;script setup&gt;</code> 带来的开发体验更丝滑的组合式 <code>API</code> 语法</li><li><code>Volar</code> 提供的单文件组件 <code>TypeScript IDE</code> 支持</li><li><code>vue-tsc</code> 提供的针对单文件组件的命令行类型检查和生成</li><li><code>Pinia</code> 提供的更简洁的状态管理</li><li>新的开发者工具扩展，同时支持 <code>Vue 2/Vue 3</code>，并且提供一个插件系统来允许社区库自行扩展开 - 发者工具面板。</li></ul><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F460055155" title="https://zhuanlan.zhihu.com/p/460055155" target="_blank" rel="noreferrer">zhuanlan.zhihu.com/p/460055155</a></p><h2 id="_1-22-document-domain-被禁用" tabindex="-1">[1-22] document.domain 被禁用 <a class="header-anchor" href="#_1-22-document-domain-被禁用" aria-label="Permalink to &quot;\\[1-22\\] document.domain 被禁用&quot;">​</a></h2><p>自 <code>Chrome 101</code> 版本开始，<code>document.domain</code> 将变为可读属性。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e5d6a56c12141e6a681f34b4ae2f161~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>当两个页面的 <code>document.domain</code> 都设置为二级域名的时候，浏览器就会将两个来源视为同源，利用这个方法我们可以绕过浏览器的同源策略。</p><p>也就是意味着上述这种跨域的方式被禁用了，后续可以替换为 <code>postMessage</code> 的跨域方案。</p><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247492113%26idx%3D1%26sn%3Dcacc274e8c8756582e77582388be6665%26chksm%3Dc2e1173af5969e2c3513d2e1649f0f09ac79fd011155ae0f92883e4bbb9f9bb3cdb533fee100%26token%3D1851580176%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247492113&amp;idx=1&amp;sn=cacc274e8c8756582e77582388be6665&amp;chksm=c2e1173af5969e2c3513d2e1649f0f09ac79fd011155ae0f92883e4bbb9f9bb3cdb533fee100&amp;token=1851580176&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">Chrome 又搞事情，这种跨域方案要被禁用了！</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fimmutable-document-domain%2F" title="https://developer.chrome.com/blog/immutable-document-domain/" target="_blank" rel="noreferrer">developer.chrome.com/blog/immuta…</a></li></ul><h2 id="_2-13-node-js-支持-fetch-api" tabindex="-1">[2-13] Node.js 支持 Fetch API <a class="header-anchor" href="#_2-13-node-js-支持-fetch-api" aria-label="Permalink to &quot;\\[2-13\\] Node.js 支持 Fetch API&quot;">​</a></h2><p><code>Fetch API</code> 是当前最流行的跨平台 <code>HTTP Client API</code> 。</p><p>在最新的 <code>Node.js v17.5</code> 版本中，增加了对 <code>Fetch API</code> 的支持，后续无需再借助 <code>axios、needle、node-fetch、request</code> 等第三方请求库了！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7be15fa1ac59407c9d669f17c52bf24a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>这并不是简单的支持了一个新的原生 <code>HTTP</code> 请求库那么简单，这意味着很多之前在 <code>Web</code> 中用到 <code>Fetch</code> 的 <code>NPM</code> 包也可以在 <code>Node.js</code> 里以同样的方式工作了，这些包同样可以实现跨平台兼容了～</p><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247492540%26idx%3D1%26sn%3Dbefc8069f3276f4ac360f0c8cc0c7006%26chksm%3Dc2e11697f5969f8142bdf7c5805a3bcaf5c99c5095b9c144ccbfad8d97ea11a3f26bead84aa7%26token%3D1851580176%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247492540&amp;idx=1&amp;sn=befc8069f3276f4ac360f0c8cc0c7006&amp;chksm=c2e11697f5969f8142bdf7c5805a3bcaf5c99c5095b9c144ccbfad8d97ea11a3f26bead84aa7&amp;token=1851580176&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">Node.js 可以和 Web 实现 HTTP 请求的跨平台兼容了！</a></li></ul><h2 id="_2-27-user-agent-携带信息即将进行删减" tabindex="-1">[2-27] User-Agent 携带信息即将进行删减 <a class="header-anchor" href="#_2-27-user-agent-携带信息即将进行删减" aria-label="Permalink to &quot;\\[2-27\\] User-Agent 携带信息即将进行删减&quot;">​</a></h2><p>为了减轻 <code>User-Agent</code> 的身份标识作用， <code>Chrome</code> 正在逐步减少 <code>User-Agent</code> 中的信息。</p><p>以下几部分信息都会逐步缩减：</p><ul><li>User-Agent HTTP 请求标头</li><li>Javascript navigator.userAgentgetter</li><li>Javascript navigator.platformgetter</li><li>Javascript navigator.appVersiongetter</li></ul><p>浏览器会推荐大家使用新的 <code>User-Agent Client</code>，里面只会包括下面几部分信息：</p><ul><li><code>Sec-CH-UA</code>: 浏览器名称和主要/重要版本</li><li><code>Sec-CH-UA-Mobile</code>: 是否为移动设备</li><li><code>Sec-CH-UA-Platform</code>: 操作系统名称</li></ul><p>例如，<code>Chrome/99.0.2345.12</code> 这样的版本号将会被简化为 <code>Chrome/99.0.0.0</code> ，这大大的减轻了 UA 对用户的身份标识作用。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe1e4c9c50d54d6196593bd16f3d7cfa~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>具体减少计划：</p><p><code>Chrome 92</code>：使用 navigator.userAgent 、navigator.appVersion 和 navigator.platform 会在控制台打印警告。</p><p><code>Chrome 95</code>：支持为的网站注册原始试用，开始对减少的 UA 字符串进行测试和反馈。</p><p><code>Chrome 101</code>：User-Agent 将会减少 Chrome MINOR.BUILD.PATCH 版本信息。推荐迁移到新的 User-Agent Client。</p><p><code>Chrome 107</code>：PC端的 User-Agent 字符串和 JS API（navigator.userAgent 、navigator.appVersion 、navigator.platform）将会直接缩减。</p><p><code>Chrome 110</code>：移动端的的 User-Agent 字符串和 JS API 将会缩减。</p><p><code>Chrome 113</code>：全面缩减。</p><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FtCuioqZO0as8jafcNx4qpA" title="https://mp.weixin.qq.com/s/tCuioqZO0as8jafcNx4qpA" target="_blank" rel="noreferrer">mp.weixin.qq.com/s/tCuioqZO0…</a></li></ul><h2 id="_3-07-javascript-将新增两个原始数据类型" tabindex="-1">[3-07] JavaScript 将新增两个原始数据类型 <a class="header-anchor" href="#_3-07-javascript-将新增两个原始数据类型" aria-label="Permalink to &quot;\\[3-07\\] JavaScript 将新增两个原始数据类型&quot;">​</a></h2><p><code>JavaScript</code> 即将推出两个新的数据类型：<code>Record</code> 和 <code>Tuple</code> ，该提案目前已经到达 <code>Stage: 2</code>。</p><p><code>Record</code> 和 <code>Tuple</code> 在用法上和对象、数据保持一致只不过他们是只读的：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// Record, 一个非常不可变的类对象结构</span></span>
<span class="line"><span>const myRecord = #{</span></span>
<span class="line"><span> name: &#39;ConardLi&#39;,</span></span>
<span class="line"><span> age: 23</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>myRecord.name = &#39;xxx&#39;; // TypeError &quot;Cannot assign to read only property &#39;name&#39; of object &#39;[object Object]&#39;&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Tuple, 一个非常不可变的类数组结构</span></span>
<span class="line"><span>const myTuple = #[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>myTuple[0] = &#39;4&#39; // TypeError &quot;Cannot assign to read only property &#39;0&#39; of object &#39;[object Tuple]&#39;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>另外还有一个很重要的点，当我们去比较 <code>Record</code> 和 <code>Tuple</code> 的值时，只会对比它们的值，而不再对比引用。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>console.log(#{ a: 1, b: 2 } === #{ b: 2, a: 1 });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-record-tuple" title="https://github.com/tc39/proposal-record-tuple" target="_blank" rel="noreferrer">github.com/tc39/propos…</a></p><h2 id="_3-08-chrome-edge-firefox-safari-决定合力解决-web-兼容性问题" tabindex="-1">[3-08] Chrome/Edge/Firefox/Safari 决定合力解决 Web 兼容性问题 <a class="header-anchor" href="#_3-08-chrome-edge-firefox-safari-决定合力解决-web-兼容性问题" aria-label="Permalink to &quot;\\[3-08\\] Chrome/Edge/Firefox/Safari 决定合力解决 Web 兼容性问题&quot;">​</a></h2><p>浏览器制造商 <code>Apple、Google、Microsoft</code> 和 <code>Mozilla</code> ，以及软件公司 <code>Bocoup</code> 和 <code>Igalia</code> 正在合力制定一项名为 <code>Interop 2022</code> 的 <code>Web</code> 兼容性规范，以使 <code>Web</code> 技术和代码在不同的设备和浏览器中有统一的渲染效果（利好前端开发）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f1678f522204c118122f78410b9cf97~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>这是有史以来第一次，所有市场上主要的浏览器供应商和利益相关者齐心协力地解决浏览器兼容性问题。此前，互相为竞争关系的浏览器厂商常常在 <code>Web</code> 技术的兼容性上出现分歧，尤其是 <code>IE</code> 还活着的时候，前端一个页面三套代码的情况十分常见。</p><p>想要跟进规范的整体进度，可以查看 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwpt.fyi%2Finterop-2022" title="https://wpt.fyi/interop-2022" target="_blank" rel="noreferrer">Interop 2022 dashboard</a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d79b355e78c342adb2213c1080c94366~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fweb.dev%2Finterop-2022%2F" title="https://web.dev/interop-2022/" target="_blank" rel="noreferrer">web.dev/interop-202…</a></p><h2 id="_3-09-ts-团队提议为-js-增加类型注释提案" tabindex="-1">[3-09] TS 团队提议为 JS 增加类型注释提案 <a class="header-anchor" href="#_3-09-ts-团队提议为-js-增加类型注释提案" aria-label="Permalink to &quot;\\[3-09\\] TS 团队提议为 JS 增加类型注释提案&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8d451d6b93a4acea8cdc869b9afd51a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>在过去的 <code>JavaScript</code> 调查报告中，静态类型一直是 <code>JavaScript</code> 开发者强烈要求的一个功能。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e5537bca275477e976933576e94545e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>微软 <code>TypeScript</code> 团队提出了一项新的提案，在提案中希望可以为 <code>JavaScript</code> 带来可选的类型注释语法。提案的目的是让开发者能够直接运行用 <code>TypeScript、Flow</code> 或其他静态类型库编写的程序，而不需要再编译一次。</p><p>如果提案能够顺利实施，将是 <code>JavaScript</code> 语法的一个重大变革，目前提案已经到达 <code>Stage: 1</code> 阶段。</p><p>提案地址：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-type-annotations" title="https://github.com/tc39/proposal-type-annotations" target="_blank" rel="noreferrer">github.com/tc39/propos…</a></p><h2 id="_3-16-vue-cli-的依赖项被供应链投毒" tabindex="-1">[3-16] vue-cli 的依赖项被供应链投毒 <a class="header-anchor" href="#_3-16-vue-cli-的依赖项被供应链投毒" aria-label="Permalink to &quot;\\[3-16\\] vue-cli 的依赖项被供应链投毒&quot;">​</a></h2><p><code>vue-cli</code> 的依赖项 <code>node-ipc</code> 包的作者 <code>RIAEvangelist</code> 是个反战人士，他特意新建了一个 <code>peacenotwar</code> 仓库来宣传他的反战理念。</p><p>更过分的是，作者不只添加了反战标语，还在 <code>node-ipc 10.1.1-10.1.2</code> 版本中添加了恶意 <code>JS</code> 文件删除俄罗斯和白俄罗斯用户文件：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea804c580e99407da8a1a7695509a4bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>攻击源码在仓库中仍可找到。源码经过压缩，简单地将一些关键字符串进行了 <code>base64</code> 编码。其行为是利用第三方服务探测用户 <code>IP</code>，针对俄罗斯和白俄罗斯 <code>IP</code>，会尝试覆盖当前目录、父目录和根目录的所有文件，把所有内容替换成 ❤。</p><p><code>node-ipc</code> 在 <code>npm</code> 上具有周百万次的下载量，这是又一次对脆弱的 <code>npm</code> 生态进行的一次沉痛打击。</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247493206%26idx%3D1%26sn%3D78afbf19cd2d3ebbd546109561dc306f%26chksm%3Dc2e1137df5969a6b181da9890f690b6c1ef981c2f1a42a708690b7fabe90d42d8c12a68d8b16%26token%3D508079022%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247493206&amp;idx=1&amp;sn=78afbf19cd2d3ebbd546109561dc306f&amp;chksm=c2e1137df5969a6b181da9890f690b6c1ef981c2f1a42a708690b7fabe90d42d8c12a68d8b16&amp;token=508079022&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">百万周下载量的 npm 包以反战为名进行供应链投毒！</a></p><h2 id="_3-22-cookie-新增-partitioned-属性" tabindex="-1">[3-22] Cookie 新增 Partitioned 属性 <a class="header-anchor" href="#_3-22-cookie-新增-partitioned-属性" aria-label="Permalink to &quot;\\[3-22\\] Cookie 新增 Partitioned 属性&quot;">​</a></h2><p><code>Chrome</code> 将在 100 到 103 版本启动 <code>Cookie CHIPS</code> 试用版本！</p><p><code>CHIPS</code> 指的是具有独立分区状态的 <code>Cookie</code>，它允许开发者将 Cookie 选择到“分区”存储中，每个顶级站点都有单独的 <code>Cookie jar\`\`。CHIPS</code> 引入了一个新的 <code>Cookie</code> 属性：<code>Partitioned</code> ，它可以让顶级上下文（顶级站点或第 <code>First-Party Sets</code>）决定哪些 <code>Cookie</code> 进行分区。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe6713aa477c47e69f4fa46a55397b65~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>例如：在站点 A 中通过 <code>iframe</code> 嵌入了一个站点 C，正常情况下如果三方 <code>Cookie</code> 被禁用后，C 是无法在 A 站点访问到它的 <code>Cookie</code> 的。如果 C 在它的 <code>Cookie</code> 上指定了 <code>Partitioned</code> 属性，这个 <code>Cookie</code> 将保存在一个特殊的分区 jar 中。它只会在站点 A 中通过 <code>iframe</code> 嵌入站点 C 时才会生效，浏览器会判定只会在顶级站点为 A 时才发送该 <code>Cookie</code>。当用户访问一个新站点时，例如站点 B，如果也它通过 <code>iframe</code> 嵌入了站点 C，这时在站点 B 下的站点 C 是无法访问到之前在 A 下面设置的那个 <code>Cookie</code> 的。</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247493309%26idx%3D1%26sn%3Db037c33a1b9d434cc502ab380d453433%26chksm%3Dc2e11396f5969a805d63be30d50dfc8367da7484da252e343d74997a82bb187544eec76b3114%26token%3D1851580176%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247493309&amp;idx=1&amp;sn=b037c33a1b9d434cc502ab380d453433&amp;chksm=c2e11396f5969a805d63be30d50dfc8367da7484da252e343d74997a82bb187544eec76b3114&amp;token=1851580176&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">谁能帮我们顺利过渡到没有三方 Cookie 的未来？</a></p><h2 id="_3-29-react-18-正式版发布" tabindex="-1">[3-29] React 18 正式版发布 <a class="header-anchor" href="#_3-29-react-18-正式版发布" aria-label="Permalink to &quot;\\[3-29\\] React 18 正式版发布&quot;">​</a></h2><p>2022年3月29号，<code>React18</code> 正式版发布。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95f42a3a898142eeb26c6c266c4cbc54~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><ul><li>新的 <code>ReactDOM.createRoot() API</code>（替换 <code>ReactDOM.render()</code>）</li><li>新的 <code>startTransition API</code>（用于非紧急状态更新）</li><li>渲染的自动批处理优化（主要解决异步回调中无法批处理的问题）</li><li>支持 <code>React.lazy</code> 的 全新 <code>SSR</code> 架构（支持 <code>&lt;Suspense&gt;</code> 组件）</li></ul><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Freactjs.org%2Fblog%2F2022%2F03%2F29%2Freact-v18.html" title="https://reactjs.org/blog/2022/03/29/react-v18.html" target="_blank" rel="noreferrer">reactjs.org/blog/2022/0…</a></p><h2 id="_4-06-chrome-100-发布" tabindex="-1">[4-06] Chrome 100 发布 <a class="header-anchor" href="#_4-06-chrome-100-发布" aria-label="Permalink to &quot;\\[4-06\\] Chrome 100 发布&quot;">​</a></h2><p>版本号分析可能出现的问题： <a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247490936%26idx%3D1%26sn%3D9701cf4d62997b39954bc3374b2ceb56%26chksm%3Dc2e2e853f595614549d34fd91c9122f3114ce1e2ffd31201af648416b5e62130a1138eecc3cc%26scene%3D21%26cur_album_id%3D2160442714947911680%23wechat_redirect" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247490936&amp;idx=1&amp;sn=9701cf4d62997b39954bc3374b2ceb56&amp;chksm=c2e2e853f595614549d34fd91c9122f3114ce1e2ffd31201af648416b5e62130a1138eecc3cc&amp;scene=21&amp;cur_album_id=2160442714947911680#wechat_redirect" target="_blank" rel="noreferrer">Chrome 版本即将突破100 ？这个问题不容忽视！</a></p><p><code>Google</code> 发布了 <code>Web 100</code> 个令人激动的瞬间 ( <a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.chrome.com%2F100%2F" title="https://developer.chrome.com/100/" target="_blank" rel="noreferrer">developer.chrome.com/100/</a> )，同时也在推特上发起了 <code>#100CoolWebMoments</code> 活动。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4269155f42734fc2a39b58bcaaf6e6d9~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p><code>Chrome 100</code> 将是最后一个默认支持未删减的 <code>User-Agent</code> 字符串的版本。<code>Chrome</code> 推荐大家用新的 <code>User-Agent Client Hints API</code> 替换 <code>User-Agent</code> 字符串。</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247493663%26idx%3D1%26sn%3D27aece8a3e4aa17af2244a3ecdae9f12%26chksm%3Dc2e11d34f59694226f60b760c605f57309ccec6dd2f6852c010d22f689aa41a9c79d0bcabb1a%26token%3D1851580176%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247493663&amp;idx=1&amp;sn=27aece8a3e4aa17af2244a3ecdae9f12&amp;chksm=c2e11d34f59694226f60b760c605f57309ccec6dd2f6852c010d22f689aa41a9c79d0bcabb1a&amp;token=1851580176&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">Chrome 100：有风险也有机遇！</a></p><h2 id="_4-10-shadowrealm-api-进入-statge3-阶段" tabindex="-1">[4-10] ShadowRealm API 进入 statge3 阶段 <a class="header-anchor" href="#_4-10-shadowrealm-api-进入-statge3-阶段" aria-label="Permalink to &quot;\\[4-10\\] ShadowRealm API 进入 statge3 阶段&quot;">​</a></h2><p><code>ShadowRealm API</code> 是一个新的 <code>JavaScript</code> 提案，目前已进入 <code>statge3</code>。</p><p>它允许一个 <code>JS</code> 运行时创建多个高度隔离的 JS 运行环境（<code>realm</code>），每个 <code>realm</code> 具有独立的全局对象和内建对象。</p><p>每个 <code>ShadowRealm</code> 实例都有自己独立的运行环境，它提供了两种方法让我们来执行运行环境中的代码：</p><ul><li><code>.evaluate()</code>：同步执行代码字符串，类似 <code>eval()</code>。</li><li><code>.importValue()</code>：返回一个 <code>Promise</code> 对象，异步执行代码字符串。</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const sr = new ShadowRealm();</span></span>
<span class="line"><span>console.assert(</span></span>
<span class="line"><span>  sr.evaluate(\`&#39;ab&#39; + &#39;cd&#39;\`) === &#39;abcd&#39;</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fblog.conardli.top%2F2022%2F04%2F10%2Fjavascript%2Fshadowrealam%2F" title="https://blog.conardli.top/2022/04/10/javascript/shadowrealam/" target="_blank" rel="noreferrer">blog.conardli.top/2022/04/10/…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2F2ality.com%2F2022%2F04%2Fshadow-realms.html" title="https://2ality.com/2022/04/shadow-realms.html" target="_blank" rel="noreferrer">2ality.com/2022/04/sha…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fdev.to%2Fsmpnjn%2Ffuture-javascript-shadowrealms-20mg" title="https://dev.to/smpnjn/future-javascript-shadowrealms-20mg" target="_blank" rel="noreferrer">dev.to/smpnjn/futu…</a></li></ul><h2 id="_4-17-change-array-by-copy-提案进入-stage3" tabindex="-1">[4-17] Change Array by copy 提案进入 <code>stage3</code> <a class="header-anchor" href="#_4-17-change-array-by-copy-提案进入-stage3" aria-label="Permalink to &quot;\\[4-17\\] Change Array by copy 提案进入 \`stage3\`&quot;">​</a></h2><p><code>Change Array by copy</code> 提案，目前已经处于 <code>stage3</code> 阶段。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da258310464f4b5ca894cd8f3759e039~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>该提案为数组新增了四个非破坏性（不改变原数组）方法：</p><ul><li><code>toSorted()</code>：<code>.sort()</code> 的非破坏性版本；</li><li><code>toReversed()</code>：<code>.reverse()</code> 的非破坏性版本；</li><li><code>with()</code>：对数组的某个元素赋值操作的非破坏性版本；</li><li><code>toSpliced()</code>：<code>.splice()</code> 的非破坏性版本。</li></ul><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-change-array-by-copy" title="https://github.com/tc39/proposal-change-array-by-copy" target="_blank" rel="noreferrer">github.com/tc39/propos…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fblog.conardli.top%2F2022%2F04%2F17%2Fjavascript%2Farray-method%2F" title="https://blog.conardli.top/2022/04/17/javascript/array-method/" target="_blank" rel="noreferrer">blog.conardli.top/2022/04/17/…</a></li></ul><h2 id="_4-19-html-新增比-iframe-更安全的-fencedframe-标签" tabindex="-1">[4-19] HTML 新增比 iframe 更安全的 fencedframe 标签 <a class="header-anchor" href="#_4-19-html-新增比-iframe-更安全的-fencedframe-标签" aria-label="Permalink to &quot;\\[4-19\\] HTML 新增比 iframe 更安全的 fencedframe 标签&quot;">​</a></h2><p><code>Fenced frames</code> 是一项 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FWICG%2Ffenced-frame" title="https://github.com/WICG/fenced-frame" target="_blank" rel="noreferrer">隐私沙盒</a> 提案，它建议顶级站点应该对数据进行分区。</p><p><code>Chrome</code> 从 <code>97</code> 版本开始对 <code>Fenced frames</code> 提供支持。</p><p>它是一个新的 <code>HTML</code> 标签，使用方式和 <code>iframe</code> 类似：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;fencedframe src=&quot;conardli.html&quot;&gt;&lt;/fencedframe&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/488c01fb47ed4b8897206f2e75f80ea8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>从对比上来看，<code>iframe</code> 还是要更灵活的，<code>Fenced frames</code> 是无法取代 <code>iframe</code> 的，但是当我们需要在同一页面上显示来自不同顶级分区的数据时，建议使用 Fenced frames 作为更私有的嵌入框架。</p><p>如果嵌入的网页是受信任的，还是用 <code>iframe</code> 即可。</p><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fblog.conardli.top%2F2022%2F04%2F19%2Fweb%2Ffencedframe%2F" title="https://blog.conardli.top/2022/04/19/web/fencedframe/" target="_blank" rel="noreferrer">blog.conardli.top/2022/04/19/…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FWICG%2Ffenced-frame" title="https://github.com/WICG/fenced-frame" target="_blank" rel="noreferrer">github.com/WICG/fenced…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fprivacy-sandbox%2Ffenced-frame%2F%23browser-support" title="https://developer.chrome.com/docs/privacy-sandbox/fenced-frame/#browser-support" target="_blank" rel="noreferrer">developer.chrome.com/docs/privac…</a></li></ul><h2 id="_4-25-chrome-支持-priority-hints-可控制网页资源加载优先级" tabindex="-1">[4-25] Chrome 支持 Priority Hints，可控制网页资源加载优先级 <a class="header-anchor" href="#_4-25-chrome-支持-priority-hints-可控制网页资源加载优先级" aria-label="Permalink to &quot;\\[4-25\\] Chrome 支持 Priority Hints，可控制网页资源加载优先级&quot;">​</a></h2><p><code>Chrome 101</code> 正式发布了 <code>Priority Hints</code>，用于指定页面资源的加载优先级，即 <code>fetchpriority</code> 属性，帮助浏览器根据优先级优化加载顺序，从而优化页面加载体验。</p><p>当浏览器开始解析网页，并开始下载图片、<code>Script</code> 以及 <code>CSS</code> 等资源的时候，浏览器会为每个资源分配一个代表资源下载优先级的 <code>fetch priority</code> 标志，而默认的资源下载顺序就取决于这个优先级标志。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5cc124ecaa542db99be7f444d0d6a21~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>另外浏览器还给我们提供了一些诸如 <code>async、defer、preload</code> 等主动干预资源下载优先级的能力，但是有些场景还是满足不了：比如网页首屏有多张轮播图，我们只希望提高第一张图片下载的优先级；<code>CSS、Font</code> 资源默认有相同的优先级，但是并不是所有 <code>CSS</code> 和 <code>Font</code> 资源都是一样重要的。</p><p>这个时候， <code>Priority Hints</code> 就派上用场了。</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247490994%26idx%3D1%26sn%3Dcc964d58400999c43235f76b10c1fb57%26chksm%3Dc2e2e899f595618fd3775f4634b4638870c199b065b77f89666d1f713f35186bc3097e7548ce%26token%3D714052344%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247490994&amp;idx=1&amp;sn=cc964d58400999c43235f76b10c1fb57&amp;chksm=c2e2e899f595618fd3775f4634b4638870c199b065b77f89666d1f713f35186bc3097e7548ce&amp;token=714052344&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">如何控制Web资源加载的优先级？</a></p><h2 id="_5-04-react-计划支持-useevent-hook-随后夭折" tabindex="-1">[5-04] React 计划支持 useEvent Hook（随后夭折） <a class="header-anchor" href="#_5-04-react-计划支持-useevent-hook-随后夭折" aria-label="Permalink to &quot;\\[5-04\\] React 计划支持 useEvent Hook（随后夭折）&quot;">​</a></h2><p><code>React</code> 的核心开发者 <code>Dan</code> 为 <code>React</code> 增加了一项新的提案 <code>useEvent</code>。</p><p>目的是为了解决下面这个场景：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function Chat() {</span></span>
<span class="line"><span>  const [text, setText] = useState(&#39;&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 🟡 每次 text 变化都会产生新的函数引用</span></span>
<span class="line"><span>  const onClick = useCallback(() =&gt; {</span></span>
<span class="line"><span>    sendMessage(text);</span></span>
<span class="line"><span>  }, [text]);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return &lt;SendButton onClick={onClick} /&gt;;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>当我们使用 <code>useCallback</code> 包裹事件处理函数时，每次状态发生变化，都会产生一个新的引用。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function Chat() {</span></span>
<span class="line"><span>  const [text, setText] = useState(&#39;&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // ✅ 永远是同一个函数引用</span></span>
<span class="line"><span>  const onClick = useEvent(() =&gt; {</span></span>
<span class="line"><span>    sendMessage(text);</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return &lt;SendButton onClick={onClick} /&gt;;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>使用 <code>useEvent</code> 包裹事件处理函数，可以让我们每次都能获取到最新的状态，而且状态变更后不会产生新的函数引用。</p><p>提案地址：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Freactjs%2Frfcs%2Fblob%2Fuseevent%2Ftext%2F0000-useevent.md" title="https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md" target="_blank" rel="noreferrer">github.com/reactjs/rfc…</a></p><p>当然，这个提案最终还是在 <code>9</code> 月份夭折了，因为它最大的问题是它相当于引入了一个新的概念，会增加 <code>Hooks</code> 的使用理解成本，你可能会从要不要使用 <code>useCallback</code> 的选择中增加一个要不要使用 <code>useEvent</code> ...</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/246bd404971a40199524c5ac9b98c7d9~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>所以 <code>React</code> 团队计划发布一个不同的、范围更小的 RFC 来取代这个 RFC。</p><h2 id="_5-16-浏览器最新私有预取代理方案-lcp-提升30" tabindex="-1">[5-16] 浏览器最新私有预取代理方案，LCP 提升30% <a class="header-anchor" href="#_5-16-浏览器最新私有预取代理方案-lcp-提升30" aria-label="Permalink to &quot;\\[5-16\\] 浏览器最新私有预取代理方案，LCP 提升30%&quot;">​</a></h2><p>为了实现更安全隐私的数据预取，<code>Google</code> 提出了一种新的数据预取方案：<code>Private prefetch proxy</code>（私有预取代理），<code>Google Search</code> 已经实施了这项方案，导航的 <code>LCP</code> 预计有 <code>20%-30%</code> 的提升！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f880e28978d1484ebaed7a7f47286cc3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>此方案具有较好的安全性，可防止代理抓包、防止用户识别，并且可以更好的和浏览器缓存进行结合。</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247494414%26idx%3D1%26sn%3Dc977828b3cc847e97a758f4b64f7195c%26chksm%3Dc2e11e25f596973355041345ed2cdffb1c26d2d0138077443a1cac98338cbd28850df72e617a%26token%3D1851580176%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247494414&amp;idx=1&amp;sn=c977828b3cc847e97a758f4b64f7195c&amp;chksm=c2e11e25f596973355041345ed2cdffb1c26d2d0138077443a1cac98338cbd28850df72e617a&amp;token=1851580176&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">Google 最新的性能优化方案，LCP 提升30%！</a></p><h2 id="_5-25-html-新增-inert-属性" tabindex="-1">[5-25] HTML 新增 inert 属性 <a class="header-anchor" href="#_5-25-html-新增-inert-属性" aria-label="Permalink to &quot;\\[5-25\\] HTML 新增 inert 属性&quot;">​</a></h2><p><code>Safari 15.5、Chrome 102、Firefox Nightly</code> 目前均对 <code>HTML inert</code> 属性提供了支持。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f502ad0f786b465cac2e81cc9b6167cf~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;div inert&gt;</span></span>
<span class="line"><span>  &lt;label for=&quot;button2&quot;&gt;codemmhy&lt;/label&gt;</span></span>
<span class="line"><span>  &lt;button id=&quot;button2&quot;&gt;I am inert&lt;/button&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>inert</code> 是一个全局的 <code>HTML</code> 属性，它可以告诉浏览器忽略元素的用户输入事件，包括焦点事件和来自辅助技术的其他事件。主要是下面两种用例：</p><ul><li>元素是 <code>DOM</code> 树的一部分，但在屏幕外或隐藏；</li><li>元素是 <code>DOM</code> 树的一部分，但应该是非交互的。</li></ul><p><code>inert</code> 主要是为了提升网页的可访问性，比如对于视力障碍的人，他不是依靠视觉来感知网页内容，而是借助了一些其他的辅助技术，再之前就有可能会和我们隐藏掉的内容进行一些意外的交互。</p><p>而 <code>inert</code> 可以让我们能够从选项卡顺序和可访问性树中直接删除元素，这就会避免上面的问题！</p><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FWICG%2Finert" title="https://github.com/WICG/inert" target="_blank" rel="noreferrer">github.com/WICG/inert</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247494855%26idx%3D1%26sn%3D2b9ef8fd743efeca59ac9ddb8f26b261%26chksm%3Dc2e119ecf59690fad6a06dbb0cfa1306da5d92de0927f853e43605c71d9014f568d64e520121%26token%3D1558566151%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247494855&amp;idx=1&amp;sn=2b9ef8fd743efeca59ac9ddb8f26b261&amp;chksm=c2e119ecf59690fad6a06dbb0cfa1306da5d92de0927f853e43605c71d9014f568d64e520121&amp;token=1558566151&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">Chrome 102：新增两个 HTML 属性、两个 JS API !</a></li></ul><h2 id="_6-05-浏览器支持直接运行-python-代码" tabindex="-1">[6-05] 浏览器支持直接运行 Python 代码 <a class="header-anchor" href="#_6-05-浏览器支持直接运行-python-代码" aria-label="Permalink to &quot;\\[6-05\\] 浏览器支持直接运行 Python 代码&quot;">​</a></h2><p>在 <code>PyCon US 2022</code> <code>的主题演讲中，Anaconda</code> 的 <code>CEO</code> <code>Peter Wang</code> 公布了一个相当令人兴奋的项目 — <code>PyScript</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a32c0812c07e4fb69ccbee0a24a86d5f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p><code>PyScript</code> 是一个 <code>JavaScript</code> 框架，可以为开发者提供了在标准 <code>HTML</code> 中嵌入编写 <code>Python</code> 代码的能力、使用 <code>Python</code> 调用 <code>JavaScript</code> 函数库，以及创建 <code>Python Web</code> 应用。</p><p>这意味着后续我们可以在浏览器直接运行 <code>Python</code> 代码。</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fpyscript.net%2F" title="https://pyscript.net/" target="_blank" rel="noreferrer">pyscript.net/</a></p><h2 id="_6-06-http-3-标准化为-rfc-9114" tabindex="-1">[6-06] HTTP/3 标准化为 RFC 9114 <a class="header-anchor" href="#_6-06-http-3-标准化为-rfc-9114" aria-label="Permalink to &quot;\\[6-06\\] HTTP/3 标准化为 RFC 9114&quot;">​</a></h2><p><code>IETF QUIC</code> 和 <code>HTTP</code> 工作组成员 <code>Robin Mark</code> 在推特上宣布，历时5年，<code>HTTP/3</code> 终于被标准化为 <code>RFC 9114</code>，这是 <code>HTTP</code> 超文本传输协议的第三个主要版本。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7c5164e70ac426ead4d1291602051a7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p><code>HTTP/3</code> 采用了谷歌多年探索的基于 <code>UDP</code> 的 <code>QUIC</code> 协议，原名叫 <code>HTTP-over-QUIC</code>，在 <code>2018</code> 年被 <code>IETF</code> 批准更名为 <code>HTTP/3</code>。目前，<code>Chrome、Firefox</code> 等主流浏览器均表示支持 <code>HTTP/3</code></p><p><code>IETF</code> 标准地址：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Frfc9114.html" title="https://www.rfc-editor.org/rfc/rfc9114.html" target="_blank" rel="noreferrer">www.rfc-editor.org/rfc/rfc9114…</a></p><h2 id="_6-13-wwdc-2022-webkit-发布多项新能力" tabindex="-1">[6-13] WWDC 2022：WebKit 发布多项新能力 <a class="header-anchor" href="#_6-13-wwdc-2022-webkit-发布多项新能力" aria-label="Permalink to &quot;\\[6-13\\] WWDC 2022：WebKit 发布多项新能力&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c43fffcc018b49afa7a0c33ef543fb4a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>在本届苹果全球开发者大会（<code>WWDC 2022</code>） 中，苹果宣布了 <code>Safari 16 beta</code> 版本的发行， <code>WebKit</code> 带来了诸多新的 Web 能力，包括：</p><ul><li>支持 <code>Web Inspector Extensions</code></li><li>支持容器查询</li><li>支持 <code>macOS</code> 的 <code>Web</code> 推送</li><li>支持 <code>CSS</code> 子网格布局</li><li>支持 <code>Flexbox Inspector</code></li><li>可访问性、动画效果改进</li><li>...</li></ul><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247494848%26idx%3D1%26sn%3D90e7c86c1db93b0b3c2ef11026150ad4%26chksm%3Dc2e119ebf59690fd96bcb9d8ae070a2dcf0dd94bc971f23335da9d3f575274c022e6eafb8ad8%26token%3D1851580176%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247494848&amp;idx=1&amp;sn=90e7c86c1db93b0b3c2ef11026150ad4&amp;chksm=c2e119ebf59690fd96bcb9d8ae070a2dcf0dd94bc971f23335da9d3f575274c022e6eafb8ad8&amp;token=1851580176&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">WWDC 2022：哪些是前端开发者要关注的信息？</a></p><h2 id="_6-15-ie-正式宣布退役" tabindex="-1">[6-15] IE 正式宣布退役 <a class="header-anchor" href="#_6-15-ie-正式宣布退役" aria-label="Permalink to &quot;\\[6-15\\] IE 正式宣布退役&quot;">​</a></h2><p><code>27</code> 岁的微软 <code>IE</code> 浏览器宣告退役。6月15日晚，微软 <code>Edge</code> 浏览器在官网宣布，微软正式结束对网页浏览软件 <code>“Internet Explorer（IE）”</code> 的支持，<code>IE</code> 浏览器正式退役了。发布于 <code>1995</code> 年夏天的 <code>IE</code> ，最终在 <code>2022</code> 年的夏天，结束了它的旅程。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/843a426b744a4e57b453f691349afe09~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fblogs.windows.com%2Fwindowsexperience%2F2022%2F06%2F15%2Finternet-explorer-11-has-retired-and-is-officially-out-of-support-what-you-need-to-know%2F" title="https://blogs.windows.com/windowsexperience/2022/06/15/internet-explorer-11-has-retired-and-is-officially-out-of-support-what-you-need-to-know/" target="_blank" rel="noreferrer">微软官方声明</a></p><h2 id="_6-17-chrome-正式支持-file-handling-api、navigation-api" tabindex="-1">[6-17] Chrome 正式支持 File Handling API、Navigation API <a class="header-anchor" href="#_6-17-chrome-正式支持-file-handling-api、navigation-api" aria-label="Permalink to &quot;\\[6-17\\] Chrome 正式支持 File Handling API、Navigation API&quot;">​</a></h2><p><code>Chrome 102</code> 版本正式支持了 <code>File Handling API</code>、<code>Navigation API</code></p><p><code>File Handling API</code> 可以让已安装的 <code>PWA</code> 向操作系统注册文件处理程序。注册后，用户就可以单击文件然后使用已安装的 <code>PWA</code> 打开它了。这非常适合与文件交互的 <code>PWA</code> 程序，例如图像编辑器、IDE、文本编辑器等。</p><p>想要让你的 <code>PWA</code> 支持文件处理功能，你需要更新一下 <code>web app manifest</code>，添加一个 <code>file_handlers</code> 数组，其中包含有关你的 PWA 可以处理的文件类型的详细信息。你需要指定要打开的 <code>URL、MIME</code> 类型、文件类型的图标和启动类型。启动类型定义是否应在单个客户端或多个客户端中打开多个文件。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;file_handlers&quot;: [</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    &quot;action&quot;: &quot;/open-csv&quot;,</span></span>
<span class="line"><span>    &quot;accept&quot;: {&quot;text/csv&quot;: [&quot;.csv&quot;]},</span></span>
<span class="line"><span>    &quot;icons&quot;: [</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        &quot;src&quot;: &quot;csv-icon.png&quot;,</span></span>
<span class="line"><span>        &quot;sizes&quot;: &quot;256x256&quot;,</span></span>
<span class="line"><span>        &quot;type&quot;: &quot;image/png&quot;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    &quot;launch_type&quot;: &quot;single-client&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>然后，想要在 <code>PWA</code> 启动时访问这些文件，你需要为 <code>launchQueue</code> 对象指定一个使用者。启动被排队，直到它们被消费者处理。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// Access from Window.launchQueue.</span></span>
<span class="line"><span>launchQueue.setConsumer((launchParams) =&gt; {</span></span>
<span class="line"><span>  if (!launchParams.files.length) {</span></span>
<span class="line"><span>    // Nothing to do when the queue is empty.</span></span>
<span class="line"><span>    return;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  for (const fileHandle of launchParams.files) {</span></span>
<span class="line"><span>    // Handle the file.</span></span>
<span class="line"><span>    openFile(fileHandle);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在很多 <code>Web</code> 开发的场景下，我们需要在没有网页中的导航的情况下去更新页面的 <code>URL</code>，特别是在 <code>SPA</code> 应用里面，我们在切换了导航之后，不希望刷新网页，只更新页面中的内容。之前我们一般都是用 <code>History API</code> 去实现的。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let stateObj = {</span></span>
<span class="line"><span>    data: &quot;ConardLi&quot;,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>history.pushState(stateObj, &quot;home&quot;, &quot;bar.html&quot;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>但是用过的都知道，这玩意实在是太难用了，而且还很笨重，也容易出现问题。<code>Navigation API</code> 提供了一种更友好的方式来帮助我们操作网页的导航。</p><p>要使用 <code>Navigation API</code>，我们需要在全局对象上添加一个 <code>navigate</code> 监听器。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>navigation.addEventListener(&#39;navigate&#39;, (navigateEvent) =&gt; {</span></span>
<span class="line"><span>  switch (navigateEvent.destination.url) {</span></span>
<span class="line"><span>    case &#39;https://blog.conardli.top/&#39;:</span></span>
<span class="line"><span>      navigateEvent.transitionWhile(loadIndexPage());</span></span>
<span class="line"><span>      break;</span></span>
<span class="line"><span>    case &#39;https://www.conardli.top/&#39;:</span></span>
<span class="line"><span>      navigateEvent.transitionWhile(loadCatsPage());</span></span>
<span class="line"><span>      break;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这个事件采用了集中处理的机制：它会被所有类型的导航触发，无论是用户执行了一个动作（例如点击链接、提交表单或返回和前进）还是以代码的方式触发导航。在大多数情况下，它会让你的代码覆盖浏览器对该操作的默认行为。对于 <code>SPA</code>，这可能意味着让用户保持在同一页面上并加载或更改网站的内容。</p><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FWICG%2Fnavigation-api" title="https://github.com/WICG/navigation-api" target="_blank" rel="noreferrer">github.com/WICG/naviga…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fchromestatus.com%2Ffeature%2F5721776357113856" title="https://chromestatus.com/feature/5721776357113856" target="_blank" rel="noreferrer">chromestatus.com/feature/572…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247494855%26idx%3D1%26sn%3D2b9ef8fd743efeca59ac9ddb8f26b261%26chksm%3Dc2e119ecf59690fad6a06dbb0cfa1306da5d92de0927f853e43605c71d9014f568d64e520121%26token%3D1558566151%26lang%3Dzh_CN%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247494855&amp;idx=1&amp;sn=2b9ef8fd743efeca59ac9ddb8f26b261&amp;chksm=c2e119ecf59690fad6a06dbb0cfa1306da5d92de0927f853e43605c71d9014f568d64e520121&amp;token=1558566151&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">Chrome 102：新增两个 HTML 属性、两个 JS API !</a></li></ul><h2 id="_6-24-ecmascript-2022-正式发布" tabindex="-1">[6-24] ECMAScript 2022 正式发布 <a class="header-anchor" href="#_6-24-ecmascript-2022-正式发布" aria-label="Permalink to &quot;\\[6-24\\] ECMAScript 2022 正式发布&quot;">​</a></h2><p><code>2022</code> 年 6 月 22 日，第 123 届 ECMA 大会批准了 <code>ECMAScript 2022</code> 语言规范，这意味着它现在正式成为标准。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df48154fb0614bd88693e514663e2c7e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>主要特性：</p><ul><li><code>Top-level Await</code>：允许我们在 <code>async</code> 函数外面使用 <code>await</code> 关键字；</li><li><code>Object.hasOwn()</code>：一种更简洁、更可靠的检查属性是否直接设置在对象上的方法；</li><li><code>at()</code>：通过给定索引来获取数组元素；</li><li>正则表达式匹配索引：允许我们利用 d 字符来表示我们想要匹配字符串的开始和结束索引；</li><li>类的公共实例字段：允许我们使用赋值运算符 (=) 将实例属性添加到类定义中</li><li>类的私有实例字段、方法：只允许类内部访问；</li><li>类的静态公共字段：使用 static 关键字声明静态类字段。</li></ul><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2F262.ecma-international.org%2F" title="https://262.ecma-international.org/" target="_blank" rel="noreferrer">262.ecma-international.org/</a></p><h2 id="_6-28-deno-推出新一代全栈框架-fresh" tabindex="-1">[6-28] Deno 推出新一代全栈框架 Fresh <a class="header-anchor" href="#_6-28-deno-推出新一代全栈框架-fresh" aria-label="Permalink to &quot;\\[6-28\\] Deno 推出新一代全栈框架 Fresh&quot;">​</a></h2><p><code>Fresh</code> 是一个面向 <code>JavaScript</code> 和 <code>TypeScript</code> 开发人员的全栈现代 <code>Web</code> 框架，基于 <code>Deno</code> 运行时，前端渲染基于 <code>Preact</code>，由 <code>Deno</code> 原班人马开发，它的核心是路由框架和模板引擎的组合，可在服务器上按需渲染页面。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aef53b8073154fd6981d49f7a0cd0a4a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p><code>Fresh</code> 可以在运行时做到按需构建，代码可以直接在服务器和客户端上运行。例如将 <code>TypeScript</code> 或 <code>JSX</code> 转换为纯 <code>JavaScript</code> 都可以在运行时按需完成，可以实现非常快速的迭代和部署。</p><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Ffresh.deno.dev%2F" title="https://fresh.deno.dev/" target="_blank" rel="noreferrer">fresh.deno.dev/</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fdenoland%2Ffresh" title="https://github.com/denoland/fresh" target="_blank" rel="noreferrer">github.com/denoland/fr…</a></li></ul><h2 id="_7-11-新一代-javascript-运行时-bun-js-发布" tabindex="-1">[7-11] 新一代 javaScript 运行时 Bun.js 发布 <a class="header-anchor" href="#_7-11-新一代-javascript-运行时-bun-js-发布" aria-label="Permalink to &quot;\\[7-11\\] 新一代 javaScript 运行时 Bun.js 发布&quot;">​</a></h2><p>近日，新一代 <code>javaScript</code> 运行时 <code>Bun.js</code> 发布了。和传统的 <code>Node.js</code> 这种传统的 <code>javaScript</code> 运行时不同，<code>Bun.js</code> 直接内置了打包器、转译器、任务运行器和 npm 客户端，这意味着你不再需要 <code>Webpack/Rollup/esbuild/Snowpack/Parcel/Rome/swc/babel</code> 就可以直接运行 <code>TypeScript、JSX</code>！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52f33cd3dd324c94865bd77754a8599a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>另外，<code>Bun.js</code> 原生支持了数百个 <code>Node.js</code> 和 <code>Web API</code>，包括约 <code>90%</code> 的 <code>Node-API</code> 函数(<code>fs、path、Buffer</code> 等)。</p><p><code>Bun.js</code> 的目标是可以在浏览器之外的其他地方运行世界上大多数 <code>JavaScript</code>，为你未来的基础架构带来性能和复杂性的增强，并通过更好、更简单的工具提高开发者的生产力！</p><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fbun.sh%2F" title="https://bun.sh/" target="_blank" rel="noreferrer">bun.sh/</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FOqSYo4aigAYXYfhU-iEWhg" title="https://mp.weixin.qq.com/s/OqSYo4aigAYXYfhU-iEWhg" target="_blank" rel="noreferrer">mp.weixin.qq.com/s/OqSYo4aig…</a></li></ul><h2 id="_7-15-vite-3-0-发布" tabindex="-1">[7-15] Vite 3.0 发布 <a class="header-anchor" href="#_7-15-vite-3-0-发布" aria-label="Permalink to &quot;\\[7-15\\] Vite 3.0 发布&quot;">​</a></h2><p><code>2021</code> 年 <code>2</code> 月，<code>Evan You</code> 式推出了 <code>Vite 2.0</code> 版本，自此之后 <code>Vite</code> 生态飞速增长，很快达到了每周 <code>100</code> 万的 <code>npm</code> 下载量，距离 <code>v2</code> 发布 <code>16</code> 个月，<code>Vite 3</code> 正式发布！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da1712c8c23c47c48a381a22220fbd47~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>主要更新如下：</p><ul><li>全新的 <code>VitePress</code> 文档</li><li>开发阶段优化 <ul><li><code>Vite CLI</code> 优化，默认端口变更为 <code>5173</code></li><li>改进 <code>WebSocket</code> 连接策略</li><li>冷启动性能优化</li><li><code>import.meta.glob</code> 语法更新</li></ul></li><li>构建阶段优化 <ul><li><code>SSR</code> 产物默认使用 <code>ESM</code></li><li>支持 <code>Relative Base</code></li></ul></li><li>实验功能 <ul><li>资产路径细粒度控制</li><li><code>Esbuild</code> 构建时优化</li><li><code>HMR Partial Accept</code></li></ul></li></ul><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fvitejs.dev%2Fblog%2Fannouncing-vite3.html" title="https://vitejs.dev/blog/announcing-vite3.html" target="_blank" rel="noreferrer">vitejs.dev/blog/announ…</a></p><blockquote><p>在今年的 12 月份，Vite 又发布了 4.0 版本，不过相比 3.0 版本更新范围较小，所以不过多介绍</p></blockquote><h2 id="_7-16-chrome-对-http-103-状态码提供支持" tabindex="-1">[7-16] Chrome 对 HTTP 103 状态码提供支持 <a class="header-anchor" href="#_7-16-chrome-对-http-103-状态码提供支持" aria-label="Permalink to &quot;\\[7-16\\] Chrome 对 HTTP 103 状态码提供支持&quot;">​</a></h2><p><code>HTTP 103</code> 状态码 (<code>Early Hints</code>) 是一个信息性 HTTP 状态代码，可以用于在最终响应之前发送一个初步的 <code>HTTP</code> 响应，它可以算作 <code>HTTP/2 Server Push</code> 的升级改良版。</p><p>利用 <code>HTTP 103</code> 状态码，可以让服务器在服务器处理主资源的同时向浏览器发送一些关键子资源（JavaScript、CSS 或字体文件）或页面可能使用的其他来源的提示。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24fbfa17815b4b9080d942754c2053eb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>浏览器可以使用这些提示来预热连接，并在等待主资源响应的同时请求子资源。换句话说，<code>Early Hints</code> 可以通过提前做一些工作来帮助浏览器利用这种服务器思考时间，从而提升页面的渲染性能。</p><p><code>Chrome</code> 宣布在 <code>Chrome 103</code> 版本对 <code>HTTP 103</code> 状态码提供了支持。</p><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fblog.conardli.top%2F2022%2F07%2F16%2Fweb%2Fhttp103%2F" title="https://blog.conardli.top/2022/07/16/web/http103/" target="_blank" rel="noreferrer">blog.conardli.top/2022/07/16/…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fearly-hints%2F" title="https://developer.chrome.com/blog/early-hints/" target="_blank" rel="noreferrer">developer.chrome.com/blog/early-…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fbashi%2Fearly-hints-explainer" title="https://github.com/bashi/early-hints-explainer" target="_blank" rel="noreferrer">github.com/bashi/early…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fhttpd.apache.org%2Fdocs%2F2.4%2Fhowto%2Fhttp2.html" title="https://httpd.apache.org/docs/2.4/howto/http2.html" target="_blank" rel="noreferrer">httpd.apache.org/docs/2.4/ho…</a></li></ul><h2 id="_7-29-firefox-支持了-backdrop-filter" tabindex="-1">[7-29] Firefox 支持了 backdrop-filter <a class="header-anchor" href="#_7-29-firefox-支持了-backdrop-filter" aria-label="Permalink to &quot;\\[7-29\\] Firefox 支持了 backdrop-filter&quot;">​</a></h2><p><code>Firefox 103</code> 版本正式支持了 <code>backdrop-filter</code> 属性，可以轻松实现一个毛玻璃效果。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/562e029705f54342b0f58d5b1417dc3d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p><code>Firefox</code> 是最后一个支持 <code>backdrop-filter</code> 属性的浏览器，目前所有浏览器均已对它提供支持。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43bfe697bc8247fd831f83045c996a99~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fbackdrop-filter" title="https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter" target="_blank" rel="noreferrer">developer.mozilla.org/en-US/docs/…</a></p><h2 id="_8-03-容器查询和-has-属性" tabindex="-1">[8-03] 容器查询和 <code>:has()</code> 属性 <a class="header-anchor" href="#_8-03-容器查询和-has-属性" aria-label="Permalink to &quot;\\[8-03\\] 容器查询和 \`:has()\` 属性&quot;">​</a></h2><p><code>Chrome 105</code> 新增了容器查询和 <code>:has()</code> 属性，这兄弟俩可以让我们能够查询父选择器的大小和样式信息，同时使子元素可以拥有响应式样式逻辑。有点类似 <code>@media</code> 查询，区别是它们根据的是容器的大小而不是视口的大小进行判断的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f52e1faa4ef94ce09977416c495090e2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>要使用容器查询，我们可以在卡片容器上设置 <code>container-type</code> 为 <code>inline-size</code>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.ard-container {</span></span>
<span class="line"><span>  container-type: inline-size;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后我们就可以使用 <code>@container</code> 将该容器的样式应用到它的任何子节点：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.card {</span></span>
<span class="line"><span>  display: grid;</span></span>
<span class="line"><span>  grid-template-columns: 1fr 1fr;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@container (max-width: 400px) {</span></span>
<span class="line"><span>  .card {</span></span>
<span class="line"><span>    grid-template-columns: 1fr;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>当容器小于 <code>400px</code> 时，它就会切换到单列布局。</p><p>我们可以使用 <code>:has()</code> 伪类更进一步，它可以让我们检查父元素是否包含具有特定参数的子元素。例如，<code>p:has(span)</code> 表示一个段落选择器，你可以使用它来设置父段落本身或其中的任何内容的样式。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>p:has(span) {</span></span>
<span class="line"><span>  /* magic styles */</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>figure:has(figcaption) {</span></span>
<span class="line"><span>  /* this figure has a figcaption */</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fhas-with-cq-m105%2F" title="https://developer.chrome.com/blog/has-with-cq-m105/" target="_blank" rel="noreferrer">developer.chrome.com/blog/has-wi…</a></p><h2 id="_8-11-islands-架构框架-astro-1-0-正式发布" tabindex="-1">[8-11] Islands 架构框架 Astro 1.0 正式发布 <a class="header-anchor" href="#_8-11-islands-架构框架-astro-1-0-正式发布" aria-label="Permalink to &quot;\\[8-11\\] Islands 架构框架 Astro 1.0 正式发布&quot;">​</a></h2><p><code>Astro</code> 是一个新型的 <code>SSR</code> 框架，它的测试版已经运行一年多。近期 <code>Astro 1.0</code> 终于发布了正式版本！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/263e15a53e524e6caa8f64d12a9c012d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p><code>Astro</code> 采用了独特的 <code>Island</code> 组件架构，团队称这是一种用于构建更快网站的新型 <code>Web</code> 架构。与传统的 <code>SPA</code> 不同，<code>Astro</code> 的组件不会被打包到一个 <code>JavaScript</code> 文件中。相反，每个组件都被视为一个独立的小型应用程序，与所有其他组件隔离存在。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05b393f68f4744859e1436f02253aeb5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fwithastro%2Fastro" title="https://github.com/withastro/astro" target="_blank" rel="noreferrer">github.com/withastro/a…</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fdocs.astro.build%2Fen%2Fgetting-started%2F" title="https://docs.astro.build/en/getting-started/" target="_blank" rel="noreferrer">docs.astro.build/en/getting-…</a></li></ul><h2 id="_8-18-http-2-server-push-将被删除" tabindex="-1">[8-18] HTTP/2 Server Push 将被删除 <a class="header-anchor" href="#_8-18-http-2-server-push-将被删除" aria-label="Permalink to &quot;\\[8-18\\] HTTP/2 Server Push 将被删除&quot;">​</a></h2><p><code>Server Push</code> 即在浏览响应 <code>HTML</code> 文件的时候，服务器会同时将所需的资源文件主动推送给浏览器。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e84cc94eaad742c48e3b4737e9b149f8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>浏览器在收到推送的资源之后会缓存到本地。等解析 <code>HTML</code> 发现需要加载对应资源的时候会直接从本地读取，不必再等待网络传输了。</p><p>虽然这听起来很神奇，但这个方案有非常大的缺陷：<code>Server Push</code> 很难避免推送浏览器已经拥有的子资源，其实很多资源在浏览器第一次请求到就已经缓存下来了。这种 “过度推动” 会导致网络带宽的使用效率降低，从而显着阻碍性能优势。总体而言，Chrome 数据显示 <code>HTTP2/Push</code> 实际上对整个网络的性能产生了负面影响。</p><p><code>Chrome</code> 宣布将在下一个主要版本（<code>Chrome 106</code>）中将删除对其的支持。</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fremoving-push%2F" title="https://developer.chrome.com/blog/removing-push/" target="_blank" rel="noreferrer">developer.chrome.com/blog/removi…</a></p><h2 id="_10-13-react-新提案-use-hook" tabindex="-1">[10-13] React 新提案：use Hook <a class="header-anchor" href="#_10-13-react-新提案-use-hook" aria-label="Permalink to &quot;\\[10-13\\] React 新提案：use Hook&quot;">​</a></h2><p>就在 <code>useEvent Hook</code> 刚刚夭折不久，<code>React</code> 又计划提供新一个新的 Hook：<code>use</code>，是的就叫 <code>use</code>，它可以让开发者更轻松的使用 <code>Suspense</code> 访问任意异步数据源。</p><p>正常情况下我们在 <code>JavaScript</code> 中请求异步数据一般要借助 <code>Promise</code>，对应的函数就要使用 <code>async</code> 和 <code>await</code>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>async function Note({id, isEditing}) {</span></span>
<span class="line"><span>  const note = await db.posts.get(id);</span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;div&gt;</span></span>
<span class="line"><span>      &lt;h1&gt;{note.title}&lt;/h1&gt;</span></span>
<span class="line"><span>      &lt;section&gt;{note.body}&lt;/section&gt;</span></span>
<span class="line"><span>      {isEditing ? &lt;NoteEditor note={note} /&gt; : null}</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>而新增的 <code>use Hook</code>，你可以类比为 <code>await</code>，正如 <code>await</code> 只能在 <code>async</code> 函数内部使用一样，<code>use</code> 只能在 <code>React</code> 组件和 <code>Hooks</code> 内部使用，而且你可以嵌套在条件、块和循环中使用，而无需将逻辑拆分为单独的组件，这使得我们在 <code>React</code> 中编写异步代码变得非常灵活：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function Note({id, shouldIncludeAuthor}) {</span></span>
<span class="line"><span>  const note = use(fetchNote(id));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  let byline = null;</span></span>
<span class="line"><span>  if (shouldIncludeAuthor) {</span></span>
<span class="line"><span>    const author = use(fetchNoteAuthor(note.authorId));</span></span>
<span class="line"><span>    byline = &lt;h2&gt;{author.displayName}&lt;/h2&gt;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;div&gt;</span></span>
<span class="line"><span>      &lt;h1&gt;{note.title}&lt;/h1&gt;</span></span>
<span class="line"><span>      {byline}</span></span>
<span class="line"><span>      &lt;section&gt;{note.body}&lt;/section&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>了解更多：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjIxNTcyMA%3D%3D%26mid%3D2247491296%26idx%3D1%26sn%3D82463fec673615856333e87d6460ca26%26chksm%3Dc25e7027f529f931b9a259dd94cfa7e6c0997fd9cd5d699c47e0881c6bda3955293c8f674bcb%23rd" title="https://mp.weixin.qq.com/s?__biz=MzkzMjIxNTcyMA==&amp;mid=2247491296&amp;idx=1&amp;sn=82463fec673615856333e87d6460ca26&amp;chksm=c25e7027f529f931b9a259dd94cfa7e6c0997fd9cd5d699c47e0881c6bda3955293c8f674bcb#rd" target="_blank" rel="noreferrer">第一个可以在条件语句中使用的原生hook诞生了</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Facdlite%2Frfcs%2Fblob%2Ffirst-class-promises%2Ftext%2F0000-first-class-support-for-promises.md" title="https://github.com/acdlite/rfcs/blob/first-class-promises/text/0000-first-class-support-for-promises.md" target="_blank" rel="noreferrer">github.com/acdlite/rfc…</a></li></ul><h2 id="_10-13-lerna-v6-发布" tabindex="-1">[10-13] Lerna V6 发布 <a class="header-anchor" href="#_10-13-lerna-v6-发布" aria-label="Permalink to &quot;\\[10-13\\] Lerna V6 发布&quot;">​</a></h2><p><code>Lerna</code> 曾经是最流行的 <code>JS monorepo</code> 工具之一，在去年 <code>Lerna</code> 的核心作者提到了 <code>Learn</code> 已经基本不再维护，在今年 5 月份，<code>Nrwl</code> 宣布接管了 <code>Lerna</code> 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f70e40b812184452a729cc1c7b90f7ac~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>随后，<code>Nrwl</code> 接管 <code>Lerna</code> 后发布了第一个全新的正式版本 <code>Lerna v6</code>，推出了新的网站，并宣布让 <code>Lerna</code> 的速度提高了 10 倍！</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247496055%26idx%3D1%26sn%3Db60a5d97a888d9ea79be088f85e556c9%26chksm%3Dc2e1045cf5968d4a416d49ede283d1bf5d3d0f8a5b0705bb1a9abba20b1789e3b0577615ca75%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247496055&amp;idx=1&amp;sn=b60a5d97a888d9ea79be088f85e556c9&amp;chksm=c2e1045cf5968d4a416d49ede283d1bf5d3d0f8a5b0705bb1a9abba20b1789e3b0577615ca75#rd" target="_blank" rel="noreferrer">复活了！ Lerna V6 带来了哪些新东西？</a></p><h2 id="_10-25-chrome-107-支持识别渲染阻塞资源" tabindex="-1">[10-25] Chrome 107：支持识别渲染阻塞资源 <a class="header-anchor" href="#_10-25-chrome-107-支持识别渲染阻塞资源" aria-label="Permalink to &quot;\\[10-25\\] Chrome 107：支持识别渲染阻塞资源&quot;">​</a></h2><p>对页面性能的可靠洞察对于我们构建好的用户体验是至关重要的，在以前，我们通常会依靠一些复杂的启发式方法来确定资源是否阻塞页面的渲染。</p><p>在 <code>Chrome 107</code> ，<code>Performance API</code> 新增了一个 <code>renderBlockingStatus</code> 属性，这个属性会提供来自浏览器的直接信号，用于识别阻塞页面渲染的资源，直到它们被下载下来。</p><p>下面的代码片段显示了如何获取所有资源的列表并使用新的 <code>renderBlockingStatus</code> 属性列出所有阻塞页面渲染的资源。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 获取所有资源</span></span>
<span class="line"><span>const res = window.performance.getEntriesByType(&#39;resource&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 过滤出阻塞渲染的资源</span></span>
<span class="line"><span>const blocking =   res.filter(({renderBlockingStatus}) =&gt;</span></span>
<span class="line"><span>      renderBlockingStatus === &#39;blocking&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bfd265c591b4a72b44c897d43978d4c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>优化这些阻塞资源的加载方式（改为异步加载或增加一些预渲染优化）对于我们网站的 <code>Core Web Vitals</code> 是非常有帮助的，大家可以用起来了～</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247496177%26idx%3D1%26sn%3Df06e5435c0c511d396a7b7b6c2902f5d%26chksm%3Dc2e104daf5968dcca607e3b5c7ded0c6a9e660e7604baff83784d22c4733e55a422ad155e692%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247496177&amp;idx=1&amp;sn=f06e5435c0c511d396a7b7b6c2902f5d&amp;chksm=c2e104daf5968dcca607e3b5c7ded0c6a9e660e7604baff83784d22c4733e55a422ad155e692#rd" target="_blank" rel="noreferrer">Chrome 最近带来了哪些有意思的新东西？</a></p><h2 id="_10-25-turbopack-发布" tabindex="-1">[10-25] Turbopack 发布 <a class="header-anchor" href="#_10-25-turbopack-发布" aria-label="Permalink to &quot;\\[10-25\\] Turbopack 发布&quot;">​</a></h2><p>在今年的 <code>Next.js</code> 大会上，伴随着 <code>Next.js 13</code> 的发布，也推出了一个新的工具：<code>Turbopack</code>。</p><p><code>Turbopack</code> 是针对 <code>JavaScript</code> 和 <code>TypeScript</code> 优化的增量打包工具，由 <code>Webpack</code> 的创建者 <code>Tobias Koppers</code> 和 <code>Next.js</code> 团队使用 <code>Rust</code> 编写。</p><p>在刚推出的时候， <code>Turbopack</code> 给出了一份性能测试数据，数据对常见的打包工具的性能做了对比，结果显示<code>Turbopack</code> 的性能比 <code>Vite</code> 快 <code>10</code> 倍，比 <code>Webpack</code> 快 <code>700</code> 倍。</p><p>此数据一出，在前端圈引起了巨大的争议，<code>Vite</code> 的作者尤雨溪也亲自回应数据不是很客观，我们现在在 <code>Turbopack</code> 官网看到的最新数据已经有了变化，测试基准也可以随意调整（处理 <code>1000-30000</code> 个 <code>React</code> 组组件）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65539da545b849ccada39c19126fded7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>可以发现在最新的测试中，相比 <code>Vite</code>，<code>Turbopack</code> 仍然有着不错的性能优势，<code>Turbopack</code> 目前只用于 <code>Next.js 13 Dev server</code>，未来还会推出独立的 <code>CLI</code> 工具，并支持其他框架，如 <code>Svelte</code> 和 <code>Vue</code>。</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fturbo.build%2Fpack" title="https://turbo.build/pack" target="_blank" rel="noreferrer">turbo.build/pack</a></p><h2 id="_11-04-浏览器存储新提案-storage-buckets-api" tabindex="-1">[11-04] 浏览器存储新提案：Storage Buckets API <a class="header-anchor" href="#_11-04-浏览器存储新提案-storage-buckets-api" aria-label="Permalink to &quot;\\[11-04\\] 浏览器存储新提案：Storage Buckets API&quot;">​</a></h2><p>多年来，<code>Web</code> 生态系统中已经发展出很多可用于存储的 <code>API</code>，例如 <code>IndexedDB、localStorage</code> 和 <code>showNotification()</code> 等等。</p><p><code>whatwg</code> 新增了 <code>Storage</code> 标准通过定义存储的持久化、容量估算、过期时间等能力来整合这些 <code>API</code>。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 从存储桶中访问 IndexedDB</span></span>
<span class="line"><span>const inboxDb = await new Promise(resolve =&gt; {</span></span>
<span class="line"><span>  const request = inboxBucket.indexedDB.open(&quot;messages&quot;);</span></span>
<span class="line"><span>  request.onupgradeneeded = () =&gt; { /* migration code */ };</span></span>
<span class="line"><span>  request.onsuccess = () =&gt; resolve(request.result);</span></span>
<span class="line"><span>  request.onerror = () =&gt; reject(request.error);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 从存储桶中使用 File API</span></span>
<span class="line"><span>const draftFile = await draftsBucket.createFile(</span></span>
<span class="line"><span>    [&quot;Attachment data&quot;], &quot;attachment.txt&quot;,</span></span>
<span class="line"><span>    { type: &quot;text/plain&quot;, lastModified: Date.now() </span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 从存储桶中访问 cache API</span></span>
<span class="line"><span>const inboxCache = await inboxBucket.caches.open(&quot;attachments&quot;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247496266%26idx%3D1%26sn%3D91e3291ee763561ac510a4a786ab8fd9%26chksm%3Dc2e10761f5968e7700d9750bb2f5bfd0db72052c8a5f9da2bcab8046949c29a860630e719483%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247496266&amp;idx=1&amp;sn=91e3291ee763561ac510a4a786ab8fd9&amp;chksm=c2e10761f5968e7700d9750bb2f5bfd0db72052c8a5f9da2bcab8046949c29a860630e719483#rd" target="_blank" rel="noreferrer">它的出现将统一所有浏览器存储 API ？！</a></p><h2 id="_11-07-typescript-支持新的-satisfies-操作符" tabindex="-1">[11-07] TypeScript 支持新的 satisfies 操作符 <a class="header-anchor" href="#_11-07-typescript-支持新的-satisfies-操作符" aria-label="Permalink to &quot;\\[11-07\\] TypeScript 支持新的 satisfies 操作符&quot;">​</a></h2><p>在使用 <code>TypeScript</code> 类型推断的时候，有很多情况下会让我们面临两难的选择：我们即希望确保某些表达式能够匹配某些类型，但也希望保留这个表达式的特定类型用来类型推断。这就让我们陷入了两难的境地，我们用更严格了类型约束了写出 bug 的可能性，但是却失去了类型推断的能力。</p><p><code>satisfies</code> 关键字就是用来解决这个问题的，它既能让我们验证表达式的类型是否与某个类型匹配，也可以保留基于值进行类型推断的能力：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type Colors = &quot;red&quot; | &quot;green&quot; | &quot;blue&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>type RGB = [red: number, green: number, blue: number];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const palette = {</span></span>
<span class="line"><span>    rad: [255, 0, 0],</span></span>
<span class="line"><span>    // 可以捕获到错别字 rad</span></span>
<span class="line"><span>    green: &quot;#00ff00&quot;,</span></span>
<span class="line"><span>    blue: [0, 0, 255]</span></span>
<span class="line"><span>} satisfies Record&lt;Colors, string | RGB&gt;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 都可以调用</span></span>
<span class="line"><span>const a = palette.red.at(0);</span></span>
<span class="line"><span>const b = palette.green.toUpperCase();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247496259%26idx%3D1%26sn%3D326f362cae61d048042bff25719d51b0%26chksm%3Dc2e10768f5968e7eb2ed9989aedb1fc4683397fa021be55516d7c9ea2fc0525d382f105c295c%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247496259&amp;idx=1&amp;sn=326f362cae61d048042bff25719d51b0&amp;chksm=c2e10768f5968e7eb2ed9989aedb1fc4683397fa021be55516d7c9ea2fc0525d382f105c295c#rd" target="_blank" rel="noreferrer">TypeScript 4.9 发布！重点新特性解读</a></p><h2 id="_11-08-rome-发布第一个稳定版本" tabindex="-1">[11-08] Rome 发布第一个稳定版本 <a class="header-anchor" href="#_11-08-rome-发布第一个稳定版本" aria-label="Permalink to &quot;\\[11-08\\] Rome 发布第一个稳定版本&quot;">​</a></h2><p><code>Rome</code> 是一个使用 <code>Rust</code> 编写的格式化和 <code>Lint</code> 工具，可以用于 <code>JavaScript、TypeScript、JSON、HTML、Markdown</code> 和 <code>CSS</code> 的格式化。相比传统的 Lint 工具，它的处理速度非常快，可以在 <code>300毫秒 - 1秒</code> 内处理 <code>6000</code> 个文件。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1dbc5bbd70d4aedaf1254228c47f58f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>但是它的野心不止于此，它的目标是将数十种前端语言工具（<code>Babel、ESLint、webpack、Prettier、Jest</code> 等）统一为一个从头开始构建的易于使用的工具。</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Frome.tools%2Fblog%2F2022%2F11%2F08%2Frome-10%2F" title="https://rome.tools/blog/2022/11/08/rome-10/" target="_blank" rel="noreferrer">rome.tools/blog/2022/1…</a></p><h2 id="_11-16-nuxt-3-0-稳定版发布" tabindex="-1">[11-16] Nuxt 3.0 稳定版发布 <a class="header-anchor" href="#_11-16-nuxt-3-0-稳定版发布" aria-label="Permalink to &quot;\\[11-16\\] Nuxt 3.0 稳定版发布&quot;">​</a></h2><p><code>Nuxt3</code> 基于 <code>Vite、Vue3</code> 和 <code>Nitro</code> 等现代框架重写，具有一流的 <code>Typescript</code> 支持，经过两年多研究、社区反馈、创新和实验，终于发布稳定版本。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ea91835cfca4129874d3a9ef75cf79d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fnuxt.com%2Fv3" title="https://nuxt.com/v3" target="_blank" rel="noreferrer">nuxt.com/v3</a></p><h2 id="_11-29-新的-css-视口单位" tabindex="-1">[11-29] 新的 CSS 视口单位 <a class="header-anchor" href="#_11-29-新的-css-视口单位" aria-label="Permalink to &quot;\\[11-29\\] 新的 CSS 视口单位&quot;">​</a></h2><p>为了解决移动端网页滚动时，动态工具栏自动收缩的问题，<code>CSS</code> 工作组规定了视口的各种状态。</p><ul><li><code>Large viewport</code>（大视口）：视口大小假设任何动态工具栏都是收缩状态。</li><li><code>Small Viewport</code>（小视口）：视口大小假设任何动态工具栏都是扩展状态。</li></ul><p>新的视口也分配了单位：</p><ul><li>代表 <code>Large viewport</code> 的单位以 <code>lv</code> 为前缀：<code>lvw、lvh、lvi、lvb、lvmin、lvmax</code>。</li><li>代表 <code>Small Viewport</code> 的单位以 <code>sv</code> 为前缀：<code>svw、svh、svi、svb、svmin、svmax</code>。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4703b24938534aec99a8832cd7cae6c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>另外还有一个 <code>Dynamic viewport</code>（动态视口）</p><p>当动态工具栏展开时，动态视口等于小视口的大小。 当动态工具栏被缩回时，动态视口等于大视口的大小。</p><p>相应的，它的视口单位以 <code>dv</code> 为前缀：<code>dvw, dvh, dvi, dvb, dvmin, dvmax</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7eaa0bd747ca4c018a563dbc348fac9c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>目前，各大浏览器均已经对新的视口单位提供了支持</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247496502%26idx%3D1%26sn%3Ddbcfe4ff66597797be31ff6e837cdf86%26chksm%3Dc2e1061df5968f0b4e55a37961d6510e4a2857bd198852e42141ebcc36a644b4da9c09db2233%23rd" title="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247496502&amp;idx=1&amp;sn=dbcfe4ff66597797be31ff6e837cdf86&amp;chksm=c2e1061df5968f0b4e55a37961d6510e4a2857bd198852e42141ebcc36a644b4da9c09db2233#rd" target="_blank" rel="noreferrer">Chrome 108 ：发布新的 CSS 布局单位！</a></p><h2 id="_12-14-sveltekit-1-0-发布" tabindex="-1">[12-14] SvelteKit 1.0 发布 <a class="header-anchor" href="#_12-14-sveltekit-1-0-发布" aria-label="Permalink to &quot;\\[12-14\\] SvelteKit 1.0 发布&quot;">​</a></h2><p><code>SvelteKit</code> 是一个用 <code>Svelte</code> 构建 <code>Web</code> 应用程序的框架，可以满足不同规模的应用开发，提供了非常灵活和体验良好的基于文件系统的路由架构。<code>Svelte</code> 是一个 <code>UI</code> 组件框架，因其出色的性能和易用性而受到开发者喜爱。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/02e3f3b8c22041928609e34c7e4d493b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>经过两年的开发，<code>SvelteKit 1.0</code> 已正式发布，现在可用于生产环境，它提供了服务端渲染、路由管理、针对 JS 和 CSS 的代码分割，以及针对不同 <code>Serverless</code> 平台生成不同代码的适配器等功能。</p><p>了解更多：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fsvelte.dev%2Fblog%2Fannouncing-sveltekit-1.0" title="https://svelte.dev/blog/announcing-sveltekit-1.0" target="_blank" rel="noreferrer">svelte.dev/blog/announ…</a></p><blockquote><p>如果你想加入高质量前端交流群，或者你有任何其他事情想和我交流也可以添加我的个人微信 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247493407%26idx%3D1%26sn%3D41b8782a3bdc75b211206b06e1929a58%26chksm%3Dc2e11234f5969b22a0d7fd50ec32be9df13e2caeef186b30b5d653836b0725def8ccd58a56cf%23rd" title="https://link.juejin.cn/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0MDMwMzQyOA%3D%3D%26mid%3D2247493407%26idx%3D1%26sn%3D41b8782a3bdc75b211206b06e1929a58%26chksm%3Dc2e11234f5969b22a0d7fd50ec32be9df13e2caeef186b30b5d653836b0725def8ccd58a56cf%23rd" target="_blank" rel="noreferrer">ConardLi</a> 。</p></blockquote><p>这些事件里哪些让你印象最深？哪些你觉得很重要但是我文中没有提到？欢迎在评论区和我留言。</p><p>如果这篇文章帮助到了你，欢迎点赞和关注。</p><p>本文转自 <a href="https://juejin.cn/post/7186454731785994301#heading-0" target="_blank" rel="noreferrer">https://juejin.cn/post/7186454731785994301#heading-0</a>，如有侵权，请联系删除。</p>`,317);function h(u,f,g,k,v,F){const s=n("ArticleMetadata"),c=n("ClientOnly");return t(),o("div",null,[b,e(c,null,{default:i(()=>[e(s)]),_:1}),m])}const q=p(d,[["render",h]]);export{j as __pageData,q as default};
