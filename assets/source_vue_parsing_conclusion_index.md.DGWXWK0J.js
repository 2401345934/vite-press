import{_ as n,o,c as s,J as e,w as c,m as t,a as r,aa as _,E as a}from"./chunks/framework.DJCjJe2w.js";const V=JSON.parse('{"title":"模版解析总结","description":"","frontmatter":{"createTime":"2022/10/30","tag":"Vue源码"},"headers":[],"relativePath":"source/vue/parsing/conclusion/index.md","filePath":"source/vue/parsing/conclusion/index.md","lastUpdated":1667401036000}'),d={name:"source/vue/parsing/conclusion/index.md"},u=t("h1",{id:"模版解析总结",tabindex:"-1"},[r("模版解析总结 "),t("a",{class:"header-anchor",href:"#模版解析总结","aria-label":'Permalink to "模版解析总结"'},"​")],-1),p=_("<ul><li>模版解析是 vue 编译过程的第一步 把 template 解析生成 AST对象</li><li>整个解析过程是一个自顶向下的分析过程 <ul><li>也就是从代码开始根据当前解析的上下文 通过分析词法来分析当前的代码</li><li>并找到对应的解析处理逻辑 创建 AST 节点</li></ul></li><li>过程中 可能会遇到元素节点的解析存在递归解析子节点的情况 <ul><li>其实就是 树的深度遍历和解析过程</li><li>解析过程中不断前进代码 更新解析上下文 根据生成的 AST 节点数组创建 AST 根节点</li></ul></li><li>最后还会处理空白字符 删除 合并一些空白字符</li><li>已经在生产环境下删除注释节点 提升后续的编译效率</li></ul>",1);function m(T,h,f,x,A,S){const l=a("ArticleMetadata"),i=a("ClientOnly");return o(),s("div",null,[u,e(i,null,{default:c(()=>[e(l)]),_:1}),p])}const C=n(d,[["render",m]]);export{V as __pageData,C as default};
