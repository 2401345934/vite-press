import{_ as i,o as p,c as r,J as e,w as l,m as n,a as c,aa as o,E as a}from"./chunks/framework.DJCjJe2w.js";const x=JSON.parse('{"title":"在 npm script 中使用变量","description":"","frontmatter":{"createTime":"2022/11/03","tag":"工程化,npm"},"headers":[],"relativePath":"engineering/npm/npm-var/index.md","filePath":"engineering/npm/npm-var/index.md","lastUpdated":1667489121000}'),m={name:"engineering/npm/npm-var/index.md"},d=n("h1",{id:"在-npm-script-中使用变量",tabindex:"-1"},[c("在 npm script 中使用变量 "),n("a",{class:"header-anchor",href:"#在-npm-script-中使用变量","aria-label":'Permalink to "在 npm script 中使用变量"'},"​")],-1),h=o(`<p>npm 为加高效的执行 npm script 做了大量的优化，创建并运行 npm script 命令 里面讲到的环境变量特性能让我们在 npm script 中直接调用依赖包里的可执行文件，更强大的是，npm 还提供了 $PATH 之外的更多的变量，比如当前正在执行的命令、包的名称和版本号、日志输出的级别等。</p><p>DRY（Don&#39;t Repeat Yourself）是基本的编程原则，在 npm script 中使用预定义变量和自定义变量让我们更容易遵从 DRY 原则，因为使用这些变量之后，npm script 就具备了自适应的能力，我们可以直接把积累起来的 npm script 使用到其他项目里面，而不用做任何修改。</p><h2 id="使用预定义变量" tabindex="-1">使用预定义变量 <a class="header-anchor" href="#使用预定义变量" aria-label="Permalink to &quot;使用预定义变量&quot;">​</a></h2><p>首先我们来看预定义变量，通过运行 npm run env 就能拿到完整的变量列表，这个列表非常长，这里我使用 npm run env | grep npm_package | sort 拿到部分排序后的预定义环境变量：</p><p>变量的使用方法遵循 shell 里面的语法，直接在 npm script 给想要引用的变量前面加上 $ 符号即可。比如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;dummy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo $npm_package_name&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,6);function _(u,k,g,E,b,v){const s=a("ArticleMetadata"),t=a("ClientOnly");return p(),r("div",null,[d,e(t,null,{default:l(()=>[e(s)]),_:1}),h])}const y=i(m,[["render",_]]);export{x as __pageData,y as default};
