import{_ as s,o as r,c,J as t,w as i,m as e,a as n,E as a}from"./chunks/framework.DJCjJe2w.js";const A=JSON.parse('{"title":"AST 转换总结","description":"","frontmatter":{"createTime":"2022/11/02","tag":"Vue源码,AST"},"headers":[],"relativePath":"source/vue/ast-transform/conclusion/index.md","filePath":"source/vue/ast-transform/conclusion/index.md","lastUpdated":1667401036000}'),d={name:"source/vue/ast-transform/conclusion/index.md"},u=e("h1",{id:"ast-转换总结",tabindex:"-1"},[n("AST 转换总结 "),e("a",{class:"header-anchor",href:"#ast-转换总结","aria-label":'Permalink to "AST 转换总结"'},"​")],-1),m=e("ul",null,[e("li",null,"如果说 parse 阶段是一个 词法分析的过程 构造基础的 ast 节点对象"),e("li",null,"那么 transform 节点就是 语法分析的阶段 把 ast 节点做了一层转换 构造出 语义化更强 信息更佳丰富的 codegenNode 在后续代码生成的阶段有着非常重要的作用"),e("li",null,[n("在转换过程中 "),e("ul",null,[e("li",null,"创建了 transform 上下文 负责维护了整个转换过程中的一些状态数据 以及提供一些修改上下文数据的函数"),e("li",null,"然后通过 深度优化的遍历方式 遍历了所有的 ast 节点"),e("li",null,"为节点执行相应的转换函数 构造对应的辅助生成代码节点 codegenNode"),e("li",null,"配置了 hoistStatic 再次遍历节点 找到所有可以被静态提升的节点和属性 修改他们对应的 codegenNode"),e("li",null,"最后 为根节点创建 codegenNode 并保留 转换 ast节点过程中创建的一些上下文数据")])])],-1);function _(p,f,h,x,N,g){const o=a("ArticleMetadata"),l=a("ClientOnly");return r(),c("div",null,[u,t(l,null,{default:i(()=>[t(o)]),_:1}),m])}const S=s(d,[["render",_]]);export{A as __pageData,S as default};
