import{_ as p,o as l,c as r,J as a,w as t,m as s,a as c,aa as o,E as n}from"./chunks/framework.DJCjJe2w.js";const v=JSON.parse('{"title":"基于GitLab+docker的前端自动化构建部署(CI/CD)流程","description":"","frontmatter":{"createTime":"2022/11/08","tag":"工程化,gitlab,cicd,docker"},"headers":[],"relativePath":"engineering/cicd/gitlab-docker-cicd/index.md","filePath":"engineering/cicd/gitlab-docker-cicd/index.md","lastUpdated":1667921721000}'),h={name:"engineering/cicd/gitlab-docker-cicd/index.md"},b=s("h1",{id:"基于gitlab-docker的前端自动化构建部署-ci-cd-流程",tabindex:"-1"},[c("基于GitLab+docker的前端自动化构建部署(CI/CD)流程 "),s("a",{class:"header-anchor",href:"#基于gitlab-docker的前端自动化构建部署-ci-cd-流程","aria-label":'Permalink to "基于GitLab+docker的前端自动化构建部署(CI/CD)流程"'},"​")],-1),d=o(`<p><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h2 id="什么是ci-cd" tabindex="-1">什么是CI/CD？ <a class="header-anchor" href="#什么是ci-cd" aria-label="Permalink to &quot;什么是CI/CD？&quot;">​</a></h2><p>CICD 是 持续集成（Continuous Integration）和持续部署（Continuous Deployment）简称。指在开发过程中自动执行一系列脚本来减低开发引入 bug 的概率，在新代码从开发到部署的过程中，尽量减少人工的介入。<a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="持续集成-ci" tabindex="-1">持续集成：CI <a class="header-anchor" href="#持续集成-ci" aria-label="Permalink to &quot;持续集成：CI&quot;">​</a></h4><p>持续集成指在和向远程仓库 push 代码后，在这次提交合并入主分支前进行一系列测试，构建等流程。假设现在有个应用的代码存储在 gitlab 上，每天开发者都 push 很多次提交，针对每次 push，你可以创建一系列脚本进行自动测试，降低往应用里引入错误的概率。这就是持续集成，它可应用在包括开发分支在内的多个分支上。<a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="持续部署-cd" tabindex="-1">持续部署：CD <a class="header-anchor" href="#持续部署-cd" aria-label="Permalink to &quot;持续部署：CD&quot;">​</a></h4><p>持续部署在持续集成的基础上更进一步，指将推送指仓库默认分支的部署至产品环境。如果这部分需要手动触发，这就是一个持续交付（Continuous Delivery）环节。<br> Gitlab 内置了 CICD 工具，不需要使用第三方工具，所以我们使用gitlab-ci以及gitlab-runner来完成我们的前端自动化构建部署<a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h2><p>前端发布流程基于gitlab-ci以及gitlab-runner，runner运行环境目前为docker，保证项目之间的开发版本不会有冲突，打包过后的前端包文件，通过<strong>rsync</strong>同步到静态资源文件中，通过监听master（生产环境）dev（开发环境）变动自动执行发布流程。<a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h2 id="流程图" tabindex="-1">流程图 <a class="header-anchor" href="#流程图" aria-label="Permalink to &quot;流程图&quot;">​</a></h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcf006e8565a5~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h2 id="实现步骤" tabindex="-1">实现步骤 <a class="header-anchor" href="#实现步骤" aria-label="Permalink to &quot;实现步骤&quot;">​</a></h2><p>1.首先用docker+nginx部署项目<br> 2.在gitlab新建的项目的CI/CD配置中填写需要发布到服务器的相关信息<br> 3.将你所需要发布的项目下新建一个.gitlab-ci.yml文件，让gitlab去执行自动化流程<br> 4.打包构建，提交代码，触发钩子执行自动化构建发布</p><p><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h3 id="_1-首先用docker-nginx部署项目" tabindex="-1">1.首先用docker+nginx部署项目 <a class="header-anchor" href="#_1-首先用docker-nginx部署项目" aria-label="Permalink to &quot;1.首先用docker+nginx部署项目&quot;">​</a></h3><p>docker下配置nginx部署vue项目步骤：<br> 1.docker pull nginx 下载nginx<br> 2.在/data /nginx（这里的/data /nginx就是服务器上前端静态资源的文件夹）路径下创建html，conf，conf.d三个文件夹，html下放npm run build打包后的静态文件<br> 3.conf下放nginx.conf,conf.d下放default.conf，nginx.conf和default.conf需要自己配置<br> 下面是nginx 模板文件 可以自己根据需要修改<br> nginx default.conf配置：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen       80;</span></span>
<span class="line"><span>  server_name  localhost;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  #charset koi8-r;</span></span>
<span class="line"><span>  #access_log  /var/log/nginx/host.access.log  main;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    root   /usr/share/nginx/html;</span></span>
<span class="line"><span>    index  index.html index.htm;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>nginx nginx.conf配置：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>user  nginx;</span></span>
<span class="line"><span>worker_processes  1;</span></span>
<span class="line"><span>error_log  /var/log/nginx/error.log warn;</span></span>
<span class="line"><span>pid        /var/run/nginx.pid;</span></span>
<span class="line"><span>events {</span></span>
<span class="line"><span>  worker_connections  1024;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>http {</span></span>
<span class="line"><span>  include       /etc/nginx/mime.types;</span></span>
<span class="line"><span>  default_type  application/octet-stream;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span>  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span>  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  access_log  /var/log/nginx/access.log  main;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  sendfile        on;</span></span>
<span class="line"><span>  #tcp_nopush     on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  keepalive_timeout  65;</span></span>
<span class="line"><span>        gzip on;</span></span>
<span class="line"><span>        gzip_disable &quot;msie6&quot;;</span></span>
<span class="line"><span>        gzip_vary on;</span></span>
<span class="line"><span>        gzip_proxied any;</span></span>
<span class="line"><span>        gzip_comp_level 1;</span></span>
<span class="line"><span>        gzip_buffers 16 8k;</span></span>
<span class="line"><span>        gzip_http_version 1.0;</span></span>
<span class="line"><span>        gzip_min_length 256;</span></span>
<span class="line"><span>        gzip_types text/plain text/css</span></span>
<span class="line"><span>                   application/json application/x-javascript text/xml</span></span>
<span class="line"><span>                   application/xml application/xml+rss text/javascript application/javascript</span></span>
<span class="line"><span>                   application/vnd.ms-fontobject application/x-font-ttf font/opentype         image/svg+xml image/x-icon</span></span>
<span class="line"><span>                   image/jpeg image/gif image/png;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>  include /etc/nginx/conf.d/*.conf;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>4.所有文件创建好之后，执行</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run --name *容器名称*</span></span>
<span class="line"><span>-p 8088:80 -v /data/nginx/html:/usr/share/nginx/html -v</span></span>
<span class="line"><span>/data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v</span></span>
<span class="line"><span>/data/nginx/log:/var/log/nginx -d nginx:1.13（镜像名称）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>常用docker指令操作：<br> --name命名容器，<br> -p映射端口比如8088:80，<br> -v映射当前文件夹到镜像中的文件夹,<br> -d后台运行容器，<br> docker ps -a 查看容器，<br> docker images -a 查看所有镜像，<br> docker rm 容器id 删除容器，<br> docker rmi 镜像id 删除镜像，<br> docker start 容器id 运行容器，<br> docker stop 容器id 停止容器</p><p><strong>到这一步，就先完成了docker+nginx部署前端项目了，接下来是配置自动化构建发布</strong><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h3 id="_2-在gitlab新建的项目的ci-cd配置中填写需要发布到服务器的相关信息" tabindex="-1">2.在gitlab新建的项目的CI/CD配置中填写需要发布到服务器的相关信息 <a class="header-anchor" href="#_2-在gitlab新建的项目的ci-cd配置中填写需要发布到服务器的相关信息" aria-label="Permalink to &quot;2.在gitlab新建的项目的CI/CD配置中填写需要发布到服务器的相关信息&quot;">​</a></h3><p><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="_2-1gitlab上项目中ci-cd中的variables变量配置-用在-yml里的-防止代码中泄露服务器信息" tabindex="-1">2.1Gitlab上项目中CI/CD中的variables变量配置（用在.yml里的，防止代码中泄露服务器信息） <a class="header-anchor" href="#_2-1gitlab上项目中ci-cd中的variables变量配置-用在-yml里的-防止代码中泄露服务器信息" aria-label="Permalink to &quot;2.1Gitlab上项目中CI/CD中的variables变量配置（用在.yml里的，防止代码中泄露服务器信息）&quot;">​</a></h4><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcfea555c7278~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="_2-2接下来在服务器上操作-配置免密登录" tabindex="-1">2.2接下来在服务器上操作，配置免密登录 <a class="header-anchor" href="#_2-2接下来在服务器上操作-配置免密登录" aria-label="Permalink to &quot;2.2接下来在服务器上操作，配置免密登录&quot;">​</a></h4><p>生产密钥对: ssh-keygen -t rsa，配置让gitlab服务器和前端代码服务器之间可以免密登录具体免密登录操作如下：<br> 登录服务器，cd .ssh 执行 ssh-keygen -t rsa命令，会生成id_rsa（秘钥）和id_rsa.pub（公钥）两个文件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cd .ssh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ssh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keygen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t rsa</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcf0070a64b74~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="image.png"></p><p>将公钥id_rsa.pub中的内容copy到authorized_keys中（做免密登录）<a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="_2-3服务器上用docker安装gitlab-runner" tabindex="-1">2.3服务器上用docker安装gitlab-runner <a class="header-anchor" href="#_2-3服务器上用docker安装gitlab-runner" aria-label="Permalink to &quot;2.3服务器上用docker安装gitlab-runner&quot;">​</a></h4><p>用docker安装gitlab-runner:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docker pull gitlab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gitlab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>停止并删除现有容器：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docker stop gitlab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">runner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> docker rm gitlab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">runner</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建启动容器：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docker run </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name gitlab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">runner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">restart always \\ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/run/docker.sock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\ -</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">srv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gitlab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">etc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gitlab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gitlab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gitlab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看日志：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker logs gitlab-runner</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="_2-4服务器上用docker注册gitlab-runner" tabindex="-1">2.4服务器上用docker注册gitlab-runner <a class="header-anchor" href="#_2-4服务器上用docker注册gitlab-runner" aria-label="Permalink to &quot;2.4服务器上用docker注册gitlab-runner&quot;">​</a></h4><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcfbf827653ce~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""> docker注册runner</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run --rm -t -i -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来会提示你进行一系列的操作<br> 1.Please enter the gitlab-ci coordinator URL (e.g. <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgitlab.com" title="https://gitlab.com" target="_blank" rel="noreferrer">gitlab.com</a> ) <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgitlab.com" title="https://gitlab.com" target="_blank" rel="noreferrer">gitlab.com</a><br> 输入您的GitLab实例URL：（gitlab中的CI/CD中的runner里面有）<br> 2.Please enter the gitlab-ci token for this runner xxx<br> 输入您获得的令牌来注册token：（gitlab中的CI/CD中的runner里面有）<br> 3.Please enter the gitlab-ci description for this runner [hostname] my-runner<br> 输入Runner的描述，稍后可以在GitLab的UI中进行更改：<br> 4.Please enter the gitlab-ci tags for this runner (comma separated): my-tag,another-tag<br> 输入与Runner有关的标签，稍后可以在GitLab的UI中进行更改：<br> 5.Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell: docker<br> 6.输入Runner执行者：<br> Please enter the Docker image (eg. ruby:2.1): alpine:latest<br> 如果您选择Docker作为执行程序，则会要求您为未在以下项目中定义一个的项目使用默认映像：这里就输入alpine:latest就行了</p><p><strong>到这一步服务器上就配置完成了</strong><br><strong>想要看自己的gitlab-runner启动没有，可以输入docker ps -a查看</strong><br><strong><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcf0074db76d0~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="image.png"></strong><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h3 id="_3-将你所需要发布的项目下新建一个-gitlab-ci-yml文件-让gitlab去执行自动化流程" tabindex="-1">3.将你所需要发布的项目下新建一个.gitlab-ci.yml文件，让gitlab去执行自动化流程 <a class="header-anchor" href="#_3-将你所需要发布的项目下新建一个-gitlab-ci-yml文件-让gitlab去执行自动化流程" aria-label="Permalink to &quot;3.将你所需要发布的项目下新建一个.gitlab-ci.yml文件，让gitlab去执行自动化流程&quot;">​</a></h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcf007679f2ad~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="_3-1gitlab-ci-yml文件" tabindex="-1">3.1gitlab-ci.yml文件 <a class="header-anchor" href="#_3-1gitlab-ci-yml文件" aria-label="Permalink to &quot;3.1gitlab-ci.yml文件&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>//做缓存的</span></span>
<span class="line"><span>cache:</span></span>
<span class="line"><span>  key: \${CI_PROJECT_NAME}</span></span>
<span class="line"><span>  paths:</span></span>
<span class="line"><span>    - node_modules/</span></span>
<span class="line"><span>//测试</span></span>
<span class="line"><span># test_e2e:</span></span>
<span class="line"><span>#   image: cypress/browsers:chrome67</span></span>
<span class="line"><span>#   stage: test</span></span>
<span class="line"><span>#   script:</span></span>
<span class="line"><span>#     - npm i</span></span>
<span class="line"><span>#     - npm run test:e2e -- --headless --record --key b2a22185-8eeb-4f0e-9b21-2d61f769d8c7</span></span>
<span class="line"><span>#   only:</span></span>
<span class="line"><span>#     - master</span></span>
<span class="line"><span>//dev环境构建</span></span>
<span class="line"><span>dev:build:</span></span>
<span class="line"><span>  image: node</span></span>
<span class="line"><span>  stage: build</span></span>
<span class="line"><span>  script:</span></span>
<span class="line"><span>    - yarn</span></span>
<span class="line"><span>    - yarn build:dev</span></span>
<span class="line"><span>  only:</span></span>
<span class="line"><span>    - dev</span></span>
<span class="line"><span>  tags:</span></span>
<span class="line"><span>    - eye-runner</span></span>
<span class="line"><span>  artifacts:</span></span>
<span class="line"><span>    expire_in: 1 week</span></span>
<span class="line"><span>    paths:</span></span>
<span class="line"><span>      - dist //项目打包后的文件夹</span></span>
<span class="line"><span>//dev环境发布</span></span>
<span class="line"><span>dev:deploy:</span></span>
<span class="line"><span>  image: alpine:3.7</span></span>
<span class="line"><span>  stage: deploy</span></span>
<span class="line"><span>  script:</span></span>
<span class="line"><span>    - echo &quot;http://mirrors.aliyun.com/alpine/v3.7/main/&quot; &gt; /etc/apk/repositories</span></span>
<span class="line"><span>    - apk add --no-cache rsync openssh</span></span>
<span class="line"><span>    - mkdir -p ~/.ssh</span></span>
<span class="line"><span>    - echo &quot;$SSH_KEY_DEMO_PRIVATE&quot; &gt;&gt; ~/.ssh/id_rsa</span></span>
<span class="line"><span>    - echo &quot;$SSH_KEY_DEMO_PUB&quot; &gt;&gt; ~/.ssh/id_rsa.pub</span></span>
<span class="line"><span>    - chmod 600 ~/.ssh/id_rsa</span></span>
<span class="line"><span>    - chmod 600 ~/.ssh/id_rsa.pub</span></span>
<span class="line"><span>    - echo -e &quot;Host *\\n\\t StrictHostKeyChecking no \\n\\n&quot; &gt; ~/.ssh/config</span></span>
<span class="line"><span>    - rsync -rav --delete ./dist/ &quot;$SERVER_DEMO_HOST:$SERVER_DEMO_PATH&quot;//同步打包后的文件夹里的内容到nginx指定的静态资源文件夹</span></span>
<span class="line"><span>  only:</span></span>
<span class="line"><span>    - dev</span></span>
<span class="line"><span>  tags:</span></span>
<span class="line"><span>    - eye-runner</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>上述为dev环境配置，生产环境同理配置即可<a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="_3-2变量说明" tabindex="-1">3.2变量说明 <a class="header-anchor" href="#_3-2变量说明" aria-label="Permalink to &quot;3.2变量说明&quot;">​</a></h4><p>SERVER_DEMO_HOST：目标CICD服务器IP地址<br> SERVER_DEMO_PATH：服务器上nginx指向的静态资源目录<br> SSH_KEY_DEMO_PRIVATE： 服务器私钥<br> SSH_KEY_DEMO_PUB：服务器公钥<a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="_3-3注意" tabindex="-1">3.3注意 <a class="header-anchor" href="#_3-3注意" aria-label="Permalink to &quot;3.3注意&quot;">​</a></h4><p>在webpack项目中配置导出的文件名为你需要同步的文件夹的名称，并且访问路径按需为相对路径，或者绝对路径，具体看项目需求。上面的./dist/就是我们项目中的打包后生成的文件夹</p><p><strong>到此我们就配置完成了，提交代码到指定分支，触发CI/CD</strong><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h3 id="_4-打包构建-提交代码-触发钩子执行自动化构建发布" tabindex="-1">4.打包构建，提交代码，触发钩子执行自动化构建发布 <a class="header-anchor" href="#_4-打包构建-提交代码-触发钩子执行自动化构建发布" aria-label="Permalink to &quot;4.打包构建，提交代码，触发钩子执行自动化构建发布&quot;">​</a></h3><p><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="提交代码触发ci-cd流程" tabindex="-1">提交代码触发CI/CD流程 <a class="header-anchor" href="#提交代码触发ci-cd流程" aria-label="Permalink to &quot;提交代码触发CI/CD流程&quot;">​</a></h4><p>然后在gitlab项目中的CI/CD流水线中能看到自己的刚刚触发的CI/CD任务，如下图所示<a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h3 id="" tabindex="-1"><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcf009e19906e~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="image.png"> <a class="header-anchor" href="#" aria-label="Permalink to &quot;![image.png](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcf009e19906e~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image)&quot;">​</a></h3><p>点击状态或者阶段都可以进入构建发布详情页面查看内容<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcf00bc62d806~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="image.png"></p><p><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="构建-build" tabindex="-1">构建：build <a class="header-anchor" href="#构建-build" aria-label="Permalink to &quot;构建：build&quot;">​</a></h4><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcf00c633a522~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="image.png"></p><p><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h4 id="发布-deploy" tabindex="-1">发布：deploy <a class="header-anchor" href="#发布-deploy" aria-label="Permalink to &quot;发布：deploy&quot;">​</a></h4><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/19/16fbcf00d45c09e8~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="image.png"></p><p>至此，大功告成，妈妈再也不用担心我发布线上代码耗费时间和出错了</p><p><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p><h2 id="自动化构建发布-ci-cd-的优势" tabindex="-1">自动化构建发布（CI/CD）的优势 <a class="header-anchor" href="#自动化构建发布-ci-cd-的优势" aria-label="Permalink to &quot;自动化构建发布（CI/CD）的优势&quot;">​</a></h2><p>项目建立仅需配置一次，即可实现自动化部署，docker环境与宿主环境不会发生环境上的冲突，gitlab控制权限，发布过程更为安全，添加自动化测试，项目上线更为省心。</p><p><a href="https://link.juejin.cn/?target=" target="_blank" rel="noreferrer"></a></p>`,74);function g(k,u,m,E,y,f){const e=n("ArticleMetadata"),i=n("ClientOnly");return l(),r("div",null,[b,a(i,null,{default:t(()=>[a(e)]),_:1}),d])}const x=p(h,[["render",g]]);export{v as __pageData,x as default};
