import{_ as e,o as t,c as p,J as s,w as h,m as a,a as r,aa as k,E as i}from"./chunks/framework.DJCjJe2w.js";const _=JSON.parse('{"title":"gitlab CiCd","description":"","frontmatter":{"createTime":"2022/11/08","tag":"工程化,cicd"},"headers":[],"relativePath":"engineering/cicd/gitlab-cicd-start/index.md","filePath":"engineering/cicd/gitlab-cicd-start/index.md","lastUpdated":1668091633000}'),c={name:"engineering/cicd/gitlab-cicd-start/index.md"},d=a("h1",{id:"gitlab-cicd",tabindex:"-1"},[r("gitlab CiCd "),a("a",{class:"header-anchor",href:"#gitlab-cicd","aria-label":'Permalink to "gitlab CiCd"'},"​")],-1),E=k(`<h2 id="gitlabci" tabindex="-1">GitLabCI <a class="header-anchor" href="#gitlabci" aria-label="Permalink to &quot;GitLabCI&quot;">​</a></h2><ul><li>轻量级，不需要复杂的安装手段。</li><li>配置简单，与gitlab可直接适配。</li><li>实时构建日志十分清晰，UI交互体验很好</li><li>使用 YAMIL，进行配置，任何人都可以很方便的使用。</li><li>没有统一的管理界面，无法统筹管理所有项目 ·</li><li>配置依赖于代码仓库，耦合度没有Jenkins低</li></ul><h2 id="ci-持续集成" tabindex="-1">CI 持续集成 <a class="header-anchor" href="#ci-持续集成" aria-label="Permalink to &quot;CI  持续集成&quot;">​</a></h2><ul><li>合并开发人员正在开发编写的所有代码一种做法</li><li>一天之内多次合并提交代码</li><li>从存储库货生产环境中进行构建和自动化测试 保证没有问题 和低级错误</li></ul><h2 id="cd-连续交付" tabindex="-1">CD 连续交付 <a class="header-anchor" href="#cd-连续交付" aria-label="Permalink to &quot;CD 连续交付&quot;">​</a></h2><ul><li>通常可以自动将更改自动推送到 发布系统 随时软件发布到生产环境</li><li>持续部署 会更进一步 并自动将更改推送到生产中。</li></ul><p>会在开始的</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">stages：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  // 在此处定义阶段  就是 每次我们打tag 和打版本都会显示几个圆圈</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">stages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义了两个阶段  一个 build  一个 test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">* </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">* </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build-code-job</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 第一个阶段的第一个事情 开始build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;Check the ruby version, then build some Ruby project files:&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ruby -v</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rake</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">test-code-job1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 第二个阶段的第一个事情 开始test</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;If the files are built successfully, test some files with one command:&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rake test1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">test-code-job2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 第二个阶段的第二个事情 开始test</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;If the files are built successfully, test other files with a different command:&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rake test2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="大致可以分为几个阶段" tabindex="-1">大致可以分为几个阶段 <a class="header-anchor" href="#大致可以分为几个阶段" aria-label="Permalink to &quot;大致可以分为几个阶段&quot;">​</a></h3><ul><li>第一阶段 编译阶段 <ul><li>一般都会先build 开始编译</li><li>代码测试 单元测试</li><li>可以在本阶段进行 打包 在第二阶段直接用 但是要通过缓存 cache</li></ul></li><li>第二阶段 打包 <ul><li>jar 报</li></ul></li><li>第三阶段 发布</li></ul><p>每个阶段之间的数据是可以放到缓存里面共享的 但是每个事情之间 的数据是不能共享的 阶段与阶段之前 一定 是 串行的 （前端叫做同步） 每个阶段的事情是 并行的 （前端叫做异步）</p>`,12);function b(o,u,g,m,y,F){const n=i("ArticleMetadata"),l=i("ClientOnly");return t(),p("div",null,[d,s(l,null,{default:h(()=>[s(n)]),_:1}),E])}const f=e(c,[["render",b]]);export{_ as __pageData,f as default};
