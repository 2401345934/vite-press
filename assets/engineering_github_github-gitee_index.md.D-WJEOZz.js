import{_ as i,o as t,c as l,J as s,w as c,m as n,a as r,aa as o,E as a}from"./chunks/framework.DJCjJe2w.js";const y=JSON.parse('{"title":"代码同步 Github 和 Gitee","description":"","frontmatter":{"createTime":"2022/11/10","tag":"工程化,GitHub,Gitee"},"headers":[],"relativePath":"engineering/github/github-gitee/index.md","filePath":"engineering/github/github-gitee/index.md","lastUpdated":1668091633000}'),b={name:"engineering/github/github-gitee/index.md"},u=n("h1",{id:"代码同步-github-和-gitee",tabindex:"-1"},[r("代码同步 Github 和 Gitee "),n("a",{class:"header-anchor",href:"#代码同步-github-和-gitee","aria-label":'Permalink to "代码同步 Github 和 Gitee"'},"​")],-1),d=o(`<h2 id="gitee-导入仓库" tabindex="-1">Gitee 导入仓库 <a class="header-anchor" href="#gitee-导入仓库" aria-label="Permalink to &quot;Gitee 导入仓库&quot;">​</a></h2><p>上篇我们已经在 Github 创建了博客仓库，现在我们在 Gitee 绑定 Github 账号后，选择仓库导入：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31df2053180041808e8c57a2c65c3acd~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>仓库建立后，问题也来了，即我们一份本地仓库，如何保证 Github 和 Gitee 仓库代码的同步呢？</p><h2 id="_1-手动同步" tabindex="-1">1. 手动同步 <a class="header-anchor" href="#_1-手动同步" aria-label="Permalink to &quot;1\\. 手动同步&quot;">​</a></h2><p>在 Gitee 的项目主页，提供了同步的按钮，你只用点一下，即可与 Github 同步更新，但是注意这里的同步功能默认是强制同步。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ff8fca7e13445eb8b3f16f906e14029~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>有点麻烦的是，我们需要在推送到 Github 后，再到 Gitee 项目主页手动点击一下。</p><h2 id="_2-推送两个仓库" tabindex="-1">2. 推送两个仓库 <a class="header-anchor" href="#_2-推送两个仓库" aria-label="Permalink to &quot;2\\. 推送两个仓库&quot;">​</a></h2><p>除此之外，我们也可以在 sh 脚本文件里，直接推送到两个仓库地址上，我们修改一下上篇的脚本：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#!/usr/bin/env sh</span></span>
<span class="line"><span># 确保脚本抛出遇到的错误</span></span>
<span class="line"><span>set -e</span></span>
<span class="line"><span># 生成静态文件</span></span>
<span class="line"><span>npm run docs:build</span></span>
<span class="line"><span># 进入生成的文件夹</span></span>
<span class="line"><span>cd docs/.vuepress/dist</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git init</span></span>
<span class="line"><span>git add -A</span></span>
<span class="line"><span>git commit -m &#39;deploy&#39;</span></span>
<span class="line"><span># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span>
<span class="line"><span>git push -f git@github.com:mqyqingfeng/learn-typescript.git master:gh-pages</span></span>
<span class="line"><span>git push -f git@gitee.com:mqyqingfeng/learn-typescript.git master:gh-pages</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cd -</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>当我们执行 <code>sh deploy.sh</code> 的时候，就会自动往两个仓库里推送。</p><h2 id="_3-github-actions-自动同步" tabindex="-1">3. Github Actions 自动同步 <a class="header-anchor" href="#_3-github-actions-自动同步" aria-label="Permalink to &quot;3\\. Github Actions 自动同步&quot;">​</a></h2><p>我们也可以利用 Github Actions，写一个工作流，在发现 Github 博客仓库的 gh-pages 分支代码更新后，自动同步当前代码到 Gitee 上。</p><p>关于 Github Actions 的介绍，可以参考阮一峰老师的 <a href="https://link.juejin.cn/?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2019%2F09%2Fgetting-started-with-github-actions.html" title="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noreferrer">《GitHub Actions 入门教程》</a>。</p><p>为了实现 Gitee 和 Github 的同步，我们需要借助一个 action，还好业界已经有现成的实现了，这里我采用的是 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FYikun%2Fhub-mirror-action" title="https://github.com/Yikun/hub-mirror-action" target="_blank" rel="noreferrer">Hub Mirror Action</a>，我们可以看到使用的示例代码：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>steps:</span></span>
<span class="line"><span>- name: Mirror the Github organization repos to Gitee.</span></span>
<span class="line"><span>  uses: Yikun/hub-mirror-action@master</span></span>
<span class="line"><span>  with:</span></span>
<span class="line"><span>    src: github/kunpengcompute</span></span>
<span class="line"><span>    dst: gitee/kunpengcompute</span></span>
<span class="line"><span>    dst_key: \${{ secrets.GITEE_PRIVATE_KEY }}</span></span>
<span class="line"><span>    dst_token: \${{ secrets.GITEE_TOKEN }}</span></span>
<span class="line"><span>    account_type: org</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>其中有四个必填项：</p><ul><li><code>src</code> 表示需要被同步的源端账户名，即我们 Github 的账户名，因为我的 Github ID 是 mqyqingfeng，所以这里我应该改成 <code>github/mqyqingfeng</code>。</li><li><code>dst</code> 表示需要同步到的目的端账户名，即我们 Gitee 的账户名，因为我的 Gitee ID 也是 mqyqingfeng，所以这里我应该改成 <code>gitee/mqyqingfeng</code>。</li><li><code>dst_key</code> 表示用于在目的端上传代码的私钥，然后将其保存在 Secrets 中。</li></ul><p>具体的操作步骤如下：</p><p>获取私钥：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cat ~/.ssh/id_rsa</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>复制私钥内容，然后在要同步的 Github 仓库中，选择 &quot;Setting&quot; -&gt; &quot;Secrets&quot; -&gt; &quot;New repository secret&quot;</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/169b90d76f984e91b559db0526b6093f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>填入 Secret 内容，Name 命名为 &quot;GITEE_PRIVATE_KEY&quot;，Value 为复制的内容<a href="https://link.juejin.cn/?target=https%3A%2F%2Flovelijunyi.gitee.io%2Fposts%2F6b66.html" title="https://lovelijunyi.gitee.io/posts/6b66.html" target="_blank" rel="noreferrer"></a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd7c9a36422a47a1a93f1155c5fceee9~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>然后点击 <code>Add secret</code> 即可。</p><ul><li>dst_token 创建仓库的API tokens， 用于自动创建不存在的仓库。这里我们从 Gitee 上获取，具体地址为 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgitee.com%2Fprofile%2Fpersonal_access_tokens" title="https://gitee.com/profile/personal_access_tokens" target="_blank" rel="noreferrer">gitee.com/profile/per…</a>。生成并复制 Token，然后同样的步骤，保存在 Github 的 Secrets 中，Name 为 &quot;GITEE_TOKEN&quot;</li></ul><p>那么我们就可以在仓库建立的根目录下，建立目录 <code>.github/workflows</code> ，然后创建一个名为<code>syncToGitee.yml</code> 的文件：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>name: syncToGitee</span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span>  push:</span></span>
<span class="line"><span>    branches:</span></span>
<span class="line"><span>      - gh-pages</span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  repo-sync:</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      - name: Mirror the Github organization repos to Gitee.</span></span>
<span class="line"><span>        uses: Yikun/hub-mirror-action@master</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          src: &#39;github/mqyqingfeng&#39;</span></span>
<span class="line"><span>          dst: &#39;gitee/mqyqingfeng&#39;</span></span>
<span class="line"><span>          dst_key: \${{ secrets.GITEE_PRIVATE_KEY }}</span></span>
<span class="line"><span>          dst_token:  \${{ secrets.GITEE_TOKEN }}</span></span>
<span class="line"><span>          static_list: &quot;learn-typescript&quot;</span></span>
<span class="line"><span>          force_update: true</span></span>
<span class="line"><span>          debug: true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>其中，<code>static_list</code> 表示单一仓库同步，<code>force_update</code> 为 <code>true</code> 表示启用 <code>git push -f</code> 强制同步，<code>debug</code> 为 <code>true</code> 表示启用 <code>debug</code> 开关，会显示所有执行命令。</p><p>当我们把这样的文件提交到 Github，Github 会自动检测并运行该脚本。但是现在还有几个问题要注意：</p><ol><li>因为我们是提交到 Github 的 gh-pages 分支上，这个文件和目录需要写在 gh-pages 分支</li><li>观察我们的脚本代码，我们就会发现，每次我们 <code>sh deploy.sh</code> 的时候，都是编译代码到 dist 目录，然后重新 git init ，最后强制提交。所以我们在项目的根目录建立 <code>.github/workflows/syncToGitee.yml</code> 并没有什么用，一来提交的是 dist 目录里的代码，二是每次还都会清空重新编译生成代码提交。</li></ol><p>为此，我们可以在脚本里添加代码，每次编译完后，再拷贝外层的 <code>.github/workflows/syncToGitee.yml</code> 到 dist 目录里，再提交到 Github 上。</p><p>所以我们依然在项目根目录添加目录和文件，此时的文件结构如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├─ docs</span></span>
<span class="line"><span>│  ├─ README.md</span></span>
<span class="line"><span>│  └─ .vuepress</span></span>
<span class="line"><span>│     └─ config.js</span></span>
<span class="line"><span>└─ .github</span></span>
<span class="line"><span>│  └─ workflows</span></span>
<span class="line"><span>│   └─ syncToGitee.yml</span></span>
<span class="line"><span>└─ package.json</span></span>
<span class="line"><span>└─ deploy.sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>脚本文件代码如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>#!/usr/bin/env sh</span></span>
<span class="line"><span># 确保脚本抛出遇到的错误</span></span>
<span class="line"><span>set -e</span></span>
<span class="line"><span># 生成静态文件</span></span>
<span class="line"><span>npm run docs:build</span></span>
<span class="line"><span># 进入生成的文件夹</span></span>
<span class="line"><span>cd docs/.vuepress/dist</span></span>
<span class="line"><span># 拷贝目录和文件</span></span>
<span class="line"><span>cp -r ../../../.github ./</span></span>
<span class="line"><span></span></span>
<span class="line"><span>git init</span></span>
<span class="line"><span>git add -A</span></span>
<span class="line"><span>git commit -m &#39;deploy&#39;</span></span>
<span class="line"><span># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span>
<span class="line"><span>git push -f git@github.com:mqyqingfeng/learn-typescript.git master:gh-pages</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cd -</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>此时我们再运行 <code>sh deploy.sh</code> 代码提交到 Github，就可以在仓库的 Actions 中看到运行记录：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26191fae032f4d4cb6968432d808246c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>执行时间大概一分钟左右，Gitee 的代码就会自动同步。</p><p>至此，我们实现了 Github 与 Gitee 代码仓库的同步。</p>`,42);function m(h,g,f,k,_,G){const e=a("ArticleMetadata"),p=a("ClientOnly");return t(),l("div",null,[u,s(p,null,{default:c(()=>[s(e)]),_:1}),d])}const q=i(b,[["render",m]]);export{y as __pageData,q as default};
