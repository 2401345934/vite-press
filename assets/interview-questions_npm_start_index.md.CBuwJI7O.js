import{_ as t,o as l,c as p,J as s,w as r,m as i,a as h,aa as d,E as a}from"./chunks/framework.DJCjJe2w.js";const D=JSON.parse('{"title":"npm","description":"","frontmatter":{"createTime":"2022/10/24","tag":"npm"},"headers":[],"relativePath":"interview-questions/npm/start/index.md","filePath":"interview-questions/npm/start/index.md","lastUpdated":1667281923000}'),o={name:"interview-questions/npm/start/index.md"},c=i("h1",{id:"npm",tabindex:"-1"},[h("npm "),i("a",{class:"header-anchor",href:"#npm","aria-label":'Permalink to "npm"'},"​")],-1),k=d(`<h2 id="npm-中的依赖包" tabindex="-1">npm 中的依赖包 <a class="header-anchor" href="#npm-中的依赖包" aria-label="Permalink to &quot;npm 中的依赖包&quot;">​</a></h2><h3 id="依赖包分类" tabindex="-1">依赖包分类 <a class="header-anchor" href="#依赖包分类" aria-label="Permalink to &quot;依赖包分类&quot;">​</a></h3><ul><li>dependencies - 业务依赖</li><li>devDependencies - 开发依赖</li><li>peerDependencies - 同伴依赖</li><li>bundledDependencies / bundleDependencies - 打包依赖</li><li>optionalDependencies - 可选依赖</li><li>作为npm的使用者，我们常用的依赖是dependencies和devDependencies，剩下三种依赖则是作为包的发布者才会使用到的字段。</li></ul><h2 id="项目版本号管理" tabindex="-1">项目版本号管理 <a class="header-anchor" href="#项目版本号管理" aria-label="Permalink to &quot;项目版本号管理&quot;">​</a></h2><p>package.json中的version字段代表的是该项目的版本号。每当项目发布新版本时，需要将version字段进行相应的更新以便后期维护。虽然可以手动的修改vsersion字段，但是为了整个发布过程的自动化，尽量使用 npm version 指令来自动更新version：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (v)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 显示设置版本号为 1.2.3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm version major   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 大版本号加 1，其余版本号归 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm version minor   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 小版本号加 1，修订号归 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm version patch   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修订号加 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>显示的设置版本号时，版本号必须符合semver规范，允许在版本号前加上个v标识。</p><h2 id="预发版本" tabindex="-1">预发版本 <a class="header-anchor" href="#预发版本" aria-label="Permalink to &quot;预发版本&quot;">​</a></h2><h3 id="当前版本号为-1-2-3" tabindex="-1">当前版本号为 1.2.3 <a class="header-anchor" href="#当前版本号为-1-2-3" aria-label="Permalink to &quot;当前版本号为 1.2.3&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm version prepatch  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 版本号变为 1.2.4-0，也就是 1.2.4 版本的第一个预发布版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm version preminor  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 版本号变为 1.3.0-0，也就是 1.3.0 版本的第一个预发布版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm version premajor  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 版本号变为 2.0.0-0，也就是 2.0.0 版本的第一个预发布版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm version prerelease  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 版本号变为 2.0.0-1，也就是使预发布版本号加一</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="在git环境中-执行npm-version修改完版本号以后-还会默认执行git-add-git-commit-git-tag操作" tabindex="-1">在git环境中，执行npm version修改完版本号以后，还会默认执行git add-&gt;git commit-&gt;git tag操作 <a class="header-anchor" href="#在git环境中-执行npm-version修改完版本号以后-还会默认执行git-add-git-commit-git-tag操作" aria-label="Permalink to &quot;在git环境中，执行npm version修改完版本号以后，还会默认执行git add-&gt;git commit-&gt;git tag操作&quot;">​</a></h3><ul><li>如果git工作区还有未提交的修改，npm version将会执行失败，可以加上-f/--force后缀来强制执行。</li><li>如果不想让npm version指令影响你的git仓库，可以在指令中使用--no-git-tag-version参数：</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version version xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,13);function m(g,E,u,v,b,y){const e=a("ArticleMetadata"),n=a("ClientOnly");return l(),p("div",null,[c,s(n,null,{default:r(()=>[s(e)]),_:1}),k])}const A=t(o,[["render",m]]);export{D as __pageData,A as default};
