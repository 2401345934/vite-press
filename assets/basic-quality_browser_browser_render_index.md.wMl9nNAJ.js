import{_ as t,o,c as n,J as l,w as s,m as i,a as d,aa as u,E as a}from"./chunks/framework.DJCjJe2w.js";const c="/vite-press-blog/assets/render.BJqmC381.png",x=JSON.parse('{"title":"浏览器渲染原理","description":"","frontmatter":{"createTime":"2022/12/01","tag":"浏览器"},"headers":[],"relativePath":"basic-quality/browser/browser/render/index.md","filePath":"basic-quality/browser/browser/render/index.md","lastUpdated":1669865874000}'),h={name:"basic-quality/browser/browser/render/index.md"},m=i("h1",{id:"浏览器渲染原理",tabindex:"-1"},[d("浏览器渲染原理 "),i("a",{class:"header-anchor",href:"#浏览器渲染原理","aria-label":'Permalink to "浏览器渲染原理"'},"​")],-1),_=u('<h2 id="浏览器是如何渲染页面" tabindex="-1">浏览器是如何渲染页面 <a class="header-anchor" href="#浏览器是如何渲染页面" aria-label="Permalink to &quot;浏览器是如何渲染页面&quot;">​</a></h2><ul><li>当浏览器的网络线程收到 HTML 文档，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</li><li>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</li><li>整个渲染流程分为多个阶段， <ul><li>分别是：HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</li><li>这样，整个渲染流程就形成了一套组织严密的生产流水线。</li></ul></li><li>解析 HTML parse-渲染主线程 <ul><li>解析过程中遇到 CSS解析 CSS，遇到 JS 执行 JS。</li><li>为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。</li><li>如果主线程解析到 Link 位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</li><li>如果主线程解析到 script 位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。因为 js 会修改当前的DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞HTML解析的根本原因。</li></ul></li><li>样式计算 style <ul><li>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。</li><li>在这一过程中，很多预设值会变成绝对值，比如 red 会变成 rgb(255,0,0）；相对单位会变成绝对单位，比如 em 会变成 Px这一步完成后，会得到一棵带有样式的 DOM 树。</li></ul></li><li>布局 layout-渲染主线程 <ul><li>布局完成后会得到布局树。</li><li>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。</li><li>例如节点的宽高、相对包含块的位置。</li><li>大部分时候，DOM 树和布局树并非一一对应。比如 dispLay:none 的节点没有几何信息，因此不会生成到布局树；</li><li>又比如使用了伪元素选择器，虽然 DOM树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。</li><li>还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</li></ul></li><li>分层 layer-渲染主线程 <ul><li>主线程会使用一套复杂的策略对整个布局树中进行分层。</li><li>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影晌分层结果，</li><li>也可以通过 wil1-change 属性更大程度的影响分层结果。</li></ul></li><li>绘制 paint-渲染主线程 <ul><li>再下一步是绘制</li><li>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</li><li>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</li><li>合成线程首先对每个图层进行分块，将其划分为更多的小区域。</li><li>它会从线程池中拿取多个线程来完成分块工作。</li></ul></li><li>光栅化 raster-合成线程 <ul><li>分块完成后，进入光栅化阶段。</li><li>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</li><li>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</li><li>光栅化的结果，就是一块一块的位图</li></ul></li><li>画 draw-合成线程 <ul><li>合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad)」信息。</li><li>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</li><li>变形发生在合成线程，与渲染主线程无关，这就是 transform 效率高的本质原因。</li><li>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</li></ul></li></ul><h2 id="渲染流水线" tabindex="-1">渲染流水线 <a class="header-anchor" href="#渲染流水线" aria-label="Permalink to &quot;渲染流水线&quot;">​</a></h2><p><img src="'+c+'" alt="图片"></p><h2 id="什么是-reflow-回流" tabindex="-1">什么是 reflow? 回流 <a class="header-anchor" href="#什么是-reflow-回流" aria-label="Permalink to &quot;什么是 reflow? 回流&quot;">​</a></h2><ul><li>reflow 的本质就是重新计算 layout 树。</li><li>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。</li><li>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当JS代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。</li><li>也同样因为如此，当 JS获取布局属性时，就可能造成无法获取到最新的布局信息。</li><li>浏览器在反复权衡下，最终决定获取属性立即 reflow</li></ul><h2 id="什么是-repaint-重绘" tabindex="-1">什么是 repaint? 重绘 <a class="header-anchor" href="#什么是-repaint-重绘" aria-label="Permalink to &quot;什么是 repaint? 重绘&quot;">​</a></h2><ul><li>repaint 的本质就是重新根据分层信息计算了绘制指令</li><li>当改动了可见样式后，就需要重新计算，会引发 repaint。</li><li>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</li></ul><h2 id="为什么-transform-性能高" tabindex="-1">为什么 transform 性能高 <a class="header-anchor" href="#为什么-transform-性能高" aria-label="Permalink to &quot;为什么 transform 性能高&quot;">​</a></h2><ul><li>因为 transform 既不会影响布局也不影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段</li><li>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无如何忙碌，也不会影响 transform 的变化。</li></ul>',10);function p(f,S,b,w,M,T){const e=a("ArticleMetadata"),r=a("ClientOnly");return o(),n("div",null,[m,l(r,null,{default:s(()=>[l(e)]),_:1}),_])}const P=t(h,[["render",p]]);export{x as __pageData,P as default};
