import{_ as n,o as l,c as h,J as a,w as c,m as s,a as p,aa as r,E as i}from"./chunks/framework.DJCjJe2w.js";const y=JSON.parse('{"title":"watchEffect API","description":"","frontmatter":{"createTime":"2022/10/24","tag":"Vue源码"},"headers":[],"relativePath":"source/vue/watch/watchEffect/index.md","filePath":"source/vue/watch/watchEffect/index.md","lastUpdated":1668091633000}'),d={name:"source/vue/watch/watchEffect/index.md"},o=s("h1",{id:"watcheffect-api",tabindex:"-1"},[p("watchEffect API "),s("a",{class:"header-anchor",href:"#watcheffect-api","aria-label":'Permalink to "watchEffect API"'},"​")],-1),k=r(`<h2 id="watcheffect" tabindex="-1">watchEffect <a class="header-anchor" href="#watcheffect" aria-label="Permalink to &quot;watchEffect&quot;">​</a></h2><ul><li>作用是注册 一个副作用函数 副作用函数内部可以访问响应式对象</li><li>当响应式对象变化 立即执行这个函数</li></ul><h2 id="watcheffect-和-watch-的不同" tabindex="-1">watchEffect 和 watch 的不同 <a class="header-anchor" href="#watcheffect-和-watch-的不同" aria-label="Permalink to &quot;watchEffect 和 watch  的不同&quot;">​</a></h2><ul><li>监听的源不同 <ul><li>watch 可以监听一个或者多个响应式对象 还可以监听一个 getter 函数</li><li>watchEffect 监听的是一个普通函数 只要内部访问了 响应式对象即可 这个函数不需要返回响应式对象</li></ul></li><li>没有回调函数 <ul><li>watchEffect 没有回调函数 在副作用函数内部 响应式对象发生变化 会再次执行这个副作用函数</li></ul></li><li>立即执行 <ul><li>watchEffect 在创建好 watcher 后 立即执行他的副作用函数</li><li>watch 需要配置 immediate 为 true 才会立即执行</li></ul></li><li>内部也是通过 doWatch 函数实现的</li><li>getter 函数就是对 source 函数 简单封装 会先判断组件的实例是否已经注销 然后每次执行 source 函数前执行 cleanup 清理函数</li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Simple effect.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  effect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WatchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WatchOptionsBase</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WatchStopHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doWatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(effect, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="注册无效回调函数-oninvalidate" tabindex="-1">注册无效回调函数 onInvalidate <a class="header-anchor" href="#注册无效回调函数-oninvalidate" aria-label="Permalink to &quot;注册无效回调函数 onInvalidate&quot;">​</a></h2><ul><li>可以利用 watchEffect 注册一个副作用函数 有一个 onInvalidate 参数</li><li>函数内部通过 preformAsyncOperation 执行某些异步操作 并且访问了 id 这个响应式对象</li><li>然后通过 onInvalidate 注册一个回调函数</li><li>检测 响应式数据发生变化的时候 会触发 getter 函数 执行 cleanup 函数</li><li>当 watcher 被销毁的时候 执行 onStop 函数 两者都会执行注册的无效回调函数 fn</li></ul>`,7);function f(u,E,w,m,g,_){const e=i("ArticleMetadata"),t=i("ClientOnly");return l(),h("div",null,[o,a(t,null,{default:c(()=>[a(e)]),_:1}),k])}const F=n(d,[["render",f]]);export{y as __pageData,F as default};
