import{_ as t,o as l,c as p,J as s,w as r,m as i,a as h,aa as d,E as a}from"./chunks/framework.DJCjJe2w.js";const F=JSON.parse('{"title":"void  和 never  类型的 区别","description":"","frontmatter":{"createTime":"2022/10/18","tag":"ts"},"headers":[],"relativePath":"interview-questions/ts/void-never/index.md","filePath":"interview-questions/ts/void-never/index.md","lastUpdated":1667281923000}'),k={name:"interview-questions/ts/void-never/index.md"},o=i("h1",{id:"void-和-never-类型的-区别",tabindex:"-1"},[h("void 和 never 类型的 区别 "),i("a",{class:"header-anchor",href:"#void-和-never-类型的-区别","aria-label":'Permalink to "void  和 never  类型的 区别"'},"​")],-1),c=d(`<ul><li>void 类型 代表返回值 是空 只要不写 return 语句都可以 或者不返回东西</li><li>void 类型 可以返回 undefined 但是不能返回 null</li><li>never 类型 表示 不能有任何返回值 这就需要在函数中 直接报错</li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> never</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,2);function v(E,_,g,u,m,y){const n=a("ArticleMetadata"),e=a("ClientOnly");return l(),p("div",null,[o,s(e,null,{default:r(()=>[s(n)]),_:1}),c])}const C=t(k,[["render",v]]);export{F as __pageData,C as default};
