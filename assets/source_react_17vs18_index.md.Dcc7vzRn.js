import{_ as l,o as t,c as i,J as s,w as r,m as n,a as c,aa as o,E as a}from"./chunks/framework.DJCjJe2w.js";const y=JSON.parse('{"title":"React 17 vs React 18 变化","description":"","frontmatter":{"createTime":"2022/11/13","tag":"React源码"},"headers":[],"relativePath":"source/react/17vs18/index.md","filePath":"source/react/17vs18/index.md","lastUpdated":1668303469000}'),u={name:"source/react/17vs18/index.md"},b=n("h1",{id:"react-17-vs-react-18-变化",tabindex:"-1"},[c("React 17 vs React 18 变化 "),n("a",{class:"header-anchor",href:"#react-17-vs-react-18-变化","aria-label":'Permalink to "React 17 vs React 18 变化"'},"​")],-1),d=o(`<h2 id="react-17-更新" tabindex="-1">React 17 更新 <a class="header-anchor" href="#react-17-更新" aria-label="Permalink to &quot;React 17 更新&quot;">​</a></h2><p>首先，官方发布日志称react17最大的特点就是<a href="https://link.juejin.cn/?target=https%3A%2F%2Freactjs.org%2Fblog%2F2020%2F10%2F20%2Freact-v17.html%23no-new-features" title="https://reactjs.org/blog/2020/10/20/react-v17.html#no-new-features" target="_blank" rel="noreferrer">无新特性</a>，这个版本主要目标是让React能渐进式升级，它允许多版本混用共存，可以说是为更远的未来版本做准备了。</p><h3 id="去除事件池" tabindex="-1">去除事件池 <a class="header-anchor" href="#去除事件池" aria-label="Permalink to &quot;去除事件池&quot;">​</a></h3><p>在React17之前，如果使用异步的方式来获取事件e对象，会发现合成事件对象被销毁，如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function App() {</span></span>
<span class="line"><span>  const handleClick = (e: React.MouseEvent) =&gt; {</span></span>
<span class="line"><span>    console.log(&#39;直接打印e&#39;, e.target) // &lt;button&gt;React事件池&lt;/button&gt;</span></span>
<span class="line"><span>    // v17以下在异步方法拿不到事件e，必须先调用 e.persist()</span></span>
<span class="line"><span>    // e.persist()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 异步方式获取事件e</span></span>
<span class="line"><span>    setTimeout(() =&gt; {</span></span>
<span class="line"><span>      console.log(&#39;setTimeout打印e&#39;, e.target) // null</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;div className=&quot;App&quot;&gt;</span></span>
<span class="line"><span>      &lt;button onClick={handleClick}&gt;React事件池&lt;/button&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58521a933adb4200b379c9b46769b072~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"> 如果你需要在事件处理函数运行之后获取事件对象的属性，你需要调用 <code>e.persist()</code>，它会将当前的合成事件从事件池中删除，并允许保留对事件的引用。</p><blockquote><p>事件池：合成事件对象会被放入池中统一管理。这意味着合成事件对象可以被复用，当所有事件处理函数被调用之后，其所有属性都会被回收释放置空。</p></blockquote><p>事件池的好处是在较旧浏览器中重用了不同事件的事件对象以提高性能，但它对现代浏览器的性能优化微乎其微，反而给开发者带来困惑，因此去除了事件池，因此也没有了事件复用机制。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function App() {</span></span>
<span class="line"><span>  // v17 去除了 React 事件池，异步方式使用e不再需要 e.persist()</span></span>
<span class="line"><span>  const handleClick = (e: React.MouseEvent) =&gt; {</span></span>
<span class="line"><span>    console.log(&#39;直接打印e&#39;, e.target) // &lt;button&gt;React事件池&lt;/button&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    setTimeout(() =&gt; {</span></span>
<span class="line"><span>      console.log(&#39;setTimeout打印e&#39;, e.target) // &lt;button&gt;React事件池&lt;/button&gt;</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;div className=&quot;App&quot;&gt;</span></span>
<span class="line"><span>      &lt;button onClick={handleClick}&gt;React事件池&lt;/button&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="事件委托到根节点" tabindex="-1">事件委托到根节点 <a class="header-anchor" href="#事件委托到根节点" aria-label="Permalink to &quot;事件委托到根节点&quot;">​</a></h3><p>reactv17前，React 将事件委托到 document 上，在react17中，则委托到根节点</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const rootNode = document.getElementById(&#39;root&#39;);</span></span>
<span class="line"><span>ReactDOM.render(&lt;App /&gt;, rootNode);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bcb3ca9b21b47f79c70883f6f264012~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import { useState, useEffect } from &#39;react&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function App() {</span></span>
<span class="line"><span>  const [isShowText, setIsShowText] = useState(false)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  const handleShowText = (e: React.MouseEvent) =&gt; {</span></span>
<span class="line"><span>    // e.stopPropagation() // v16无效</span></span>
<span class="line"><span>    // e.nativeEvent.stopImmediatePropagation() // 阻止监听同一事件的其他事件监听器被调用</span></span>
<span class="line"><span>    setIsShowText(true)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  useEffect(() =&gt; {</span></span>
<span class="line"><span>    document.addEventListener(&#39;click&#39;, () =&gt; {</span></span>
<span class="line"><span>      setIsShowText(false)</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  }, [])</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;div className=&quot;App&quot;&gt;</span></span>
<span class="line"><span>      &lt;button onClick={handleShowText}&gt;事件委托变更&lt;/button&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      {isShowText &amp;&amp; &lt;div&gt;展示文字&lt;/div&gt;}</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>如上代码，在react16和v17版本，点击按钮时，都不会显示文字。这是因为react的合成事件是基于事件委托的，有事件冒泡，先执行React事件，再执行document上挂载的事件。</p><p>v16：出于对冒泡的了解，我们直接在按钮事件上加<code>e.stopPropagation()</code>，这样就不会冒泡到document，<code>isShowText</code> 也不会被置为false了。但由于v16版本的事件委托是绑在<code>document</code>上的，它的事件源跟<code>document</code>就是同级了，而不是上下级，所以<code>e.stopPropagation()</code>并没有起作用。如果要阻止冒泡，可以使用原生的 <code>e.nativeEvent.stopImmediatePropagation()</code>阻止同级冒泡，这样文字就可以显示了。</p><p>v17：由于事件委托到根目录root节点，与<code>document</code>属于上下级关系，所以可以直接使用<code>e.stopPropagation()</code>阻止</p><blockquote><p>stopImmediatePropagation() 方法可以阻止监听同一事件的其他事件监听器被调用</p></blockquote><p>这种更新不仅方便了局部使用 React 的项目，还可以用于项目的渐进式升级，解决不同版本的 React 组件嵌套使用时，e.stopPropagation()无法正常工作的问题</p><h3 id="更贴近原生浏览器事件" tabindex="-1">更贴近原生浏览器事件 <a class="header-anchor" href="#更贴近原生浏览器事件" aria-label="Permalink to &quot;更贴近原生浏览器事件&quot;">​</a></h3><p>对事件系统进行了一些较小的更改：</p><ul><li><code>onScroll</code> 事件不再冒泡，以防止<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Fissues%2F15723" title="https://github.com/facebook/react/issues/15723" target="_blank" rel="noreferrer">出现常见的混淆</a></li><li>React 的 <code>onFocus</code> 和 <code>onBlur</code> 事件已在底层切换为原生的 <code>focusin</code> 和 <code>focusout</code> 事件。它们更接近 React 现有行为，有时还会提供额外的信息。</li></ul><blockquote><p>blur、focus 和 focusin、focusout 的区别：blur、focus 不支持冒泡，focusin、focusout 支持冒泡</p></blockquote><ul><li>捕获事件（例如，<code>onClickCapture</code>）现在使用的是实际浏览器中的捕获监听器。</li></ul><p>这些更改会使 React 与浏览器行为更接近，并提高了互操作性。</p><blockquote><p>尽管 React 17 底层已将 onFocus 事件从 focus 切换为 focusin，但请注意，这并未影响冒泡行为。在 React 中，onFocus 事件总是冒泡的，在 React 17 中会继续保持，因为通常它是一个更有用的默认值</p></blockquote><h3 id="全新的-jsx-转换器" tabindex="-1">全新的 JSX 转换器 <a class="header-anchor" href="#全新的-jsx-转换器" aria-label="Permalink to &quot;全新的 JSX 转换器&quot;">​</a></h3><p>总结下来就是两点：</p><ul><li>用 <code>jsx()</code> 函数替换 <code>React.createElement()</code></li><li>运行时自动引入 <code>jsx()</code> 函数，无需手写引入<code>react</code></li></ul><p>在v16中，我们写一个React组件，总要引入</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import React from &#39;react&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这是因为在浏览器中无法直接使用 jsx，所以要借助工具如<code>@babel/preset-react</code>将 jsx 语法转换为 <code>React.createElement</code> 的 js 代码，所以需要显式引入 React，才能正常调用 createElement。</p><p>通过<code>React.createElement()</code> 创建元素是比较频繁的操作，本身也存在一些问题，无法做到性能优化，具体可见官方优化的 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Freactjs%2Frfcs%2Fblob%2Fcreatelement-rfc%2Ftext%2F0000-create-element-changes.md%23motivation" title="https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md#motivation" target="_blank" rel="noreferrer">动机</a></p><p>v17之后，React 与 Babel 官方进行合作，直接通过将 <code>react/jsx-runtime</code> 对 jsx 语法进行了新的转换而不依赖 <code>React.createElement</code>，因此v17使用 jsx 语法可以不引入 React，应用程序依然能正常运行。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function App() {</span></span>
<span class="line"><span>  return &lt;h1&gt;Hello World&lt;/h1&gt;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 新的 jsx 转换为</span></span>
<span class="line"><span>// 由编译器引入（禁止自己引入！）</span></span>
<span class="line"><span>import { jsx as _jsx } from &#39;react/jsx-runtime&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function App() {</span></span>
<span class="line"><span>  return _jsx(&#39;h1&#39;, { children: &#39;Hello world&#39; });</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>如何升级至新的 JSX 转换</strong></p><ul><li>更新至支持新转换的 React 版本（v17）</li></ul><blockquote><p>如果你还在使用v16，也可升级至 React <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Freleases%2Ftag%2Fv16.14.0" title="https://github.com/facebook/react/releases/tag/v16.14.0" target="_blank" rel="noreferrer">v16.14.0</a> 的版本，官方在该版本也支持这个特性。</p></blockquote><ul><li>修改配置</li></ul><ol><li><code>@babel/preset-react</code>编译增加 <code>runtime: &#39;automatic&#39;</code>配置</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 如果你使用的是 @babel/preset-react</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;presets&quot;: [</span></span>
<span class="line"><span>    [&quot;@babel/preset-react&quot;, {</span></span>
<span class="line"><span>      &quot;runtime&quot;: &quot;automatic&quot;</span></span>
<span class="line"><span>    }]</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 如果你使用的是 @babel/plugin-transform-react-jsx</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;plugins&quot;: [</span></span>
<span class="line"><span>    [&quot;@babel/plugin-transform-react-jsx&quot;, {</span></span>
<span class="line"><span>      &quot;runtime&quot;: &quot;automatic&quot;</span></span>
<span class="line"><span>    }]</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="2"><li>修改 <code>tsconfig.json</code> 配置，<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.typescriptlang.org%2Ftsconfig%23jsx" title="https://www.typescriptlang.org/tsconfig#jsx" target="_blank" rel="noreferrer">具体配置可见TS官方文档</a></li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;compilerOptions&quot;: {</span></span>
<span class="line"><span>        // &quot;jsx&quot;: &quot;react&quot;,</span></span>
<span class="line"><span>        &quot;jsx&quot;: &quot;react-jsx&quot;,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>从 Babel 8 开始，&quot;automatic&quot; 会将两个插件默认集成在 rumtime 中</p></blockquote><h3 id="副作用清理时机" tabindex="-1">副作用清理时机 <a class="header-anchor" href="#副作用清理时机" aria-label="Permalink to &quot;副作用清理时机&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>useEffect(() =&gt; {</span></span>
<span class="line"><span>  // This is the effect itself.</span></span>
<span class="line"><span>  return () =&gt; {</span></span>
<span class="line"><span>    // This is its cleanup.</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>v17前，组件被卸载时，<code>useEffect</code>的清理函数都是同步运行的；对于大型应用程序来说，同步会减缓屏幕的过渡（如切换标签）</li><li>v17后，<code>useEffect</code> 副作用清理函数是<strong>异步执行</strong>的，如果要卸载组件，则清理会在屏幕更新后运行</li></ul><p>此外，v17 将在运行任何新副作用之前执行所有副作用的清理函数（针对所有组件），v16 只对组件内的副作用保证这种顺序。</p><p>不过需要注意</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>useEffect(() =&gt; {</span></span>
<span class="line"><span>  someRef.current.someSetupMethod();</span></span>
<span class="line"><span>  return () =&gt; {</span></span>
<span class="line"><span>    someRef.current.someCleanupMethod();</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>问题在于 someRef.current 是可变的且因为异步的，在运行清除函数时，它可能已经设置为 null。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 用一个变量量在 ref 每次变化时，将 someRef.current 保存起来，放到副作用清理回调函数的闭包中，来保证不可变性。</span></span>
<span class="line"><span>useEffect(() =&gt; {</span></span>
<span class="line"><span>  const instance = someRef.current</span></span>
<span class="line"><span>  instance.someSetupMethod()</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  return () =&gt; {</span></span>
<span class="line"><span>    instance.someCleanupMethod()</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>或者用 <code>useLayoutEffect</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>useLayoutEffect(() =&gt; {</span></span>
<span class="line"><span>  someRef.current.someSetupMethod();</span></span>
<span class="line"><span>  return () =&gt; {</span></span>
<span class="line"><span>    someRef.current.someCleanupMethod();</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>useLayoutEffect 可以保证回调函数同步执行，这样就能确保 ref 此时还是最后的值。</p><h3 id="返回一致的-undefined-错误" tabindex="-1">返回一致的 undefined 错误 <a class="header-anchor" href="#返回一致的-undefined-错误" aria-label="Permalink to &quot;返回一致的 undefined 错误&quot;">​</a></h3><p>在v17以前，组件返回<code>undefined</code>始终是一个错误。但是有漏网之鱼，React 只对类组件和函数组件执行此操作，但并不会检查 <code>forwardRef</code> 和 <code>memo</code> 组件的返回值。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function Button() {</span></span>
<span class="line"><span>  return; // Error: Nothing was returned from render</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function Button() {</span></span>
<span class="line"><span>  // We forgot to write return, so this component returns undefined.</span></span>
<span class="line"><span>  // React surfaces this as an error instead of ignoring it.</span></span>
<span class="line"><span>  &lt;button /&gt;;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在 v17 中修复了这个问题，forwardRef 和 memo 组件的行为会与常规函数组件和类组件保持一致，在返回 undefined 时会报错</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let Button = forwardRef(() =&gt; {</span></span>
<span class="line"><span>  // We forgot to write return, so this component returns undefined.</span></span>
<span class="line"><span>  // React 17 surfaces this as an error instead of ignoring it.</span></span>
<span class="line"><span>  &lt;button /&gt;;</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let Button = memo(() =&gt; {</span></span>
<span class="line"><span>  // We forgot to write return, so this component returns undefined.</span></span>
<span class="line"><span>  // React 17 surfaces this as an error instead of ignoring it.</span></span>
<span class="line"><span>  &lt;button /&gt;;</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="原生组件栈" tabindex="-1">原生组件栈 <a class="header-anchor" href="#原生组件栈" aria-label="Permalink to &quot;原生组件栈&quot;">​</a></h3><p>v16中错误调用栈的缺点：</p><ul><li>缺少源码位置追溯，在控制台无法点击跳转到到出错的地方</li><li>无法适用于生产环境</li></ul><p>整体来说不如原生的 JavaScript 调用栈，不同于常规压缩后的 JavaScript 调用栈，它们可以通过 sourcemap 的形式自动恢复到原始函数的位置，而使用 React 组件栈，在生产环境下必须在调用栈信息和 bundle 大小间进行选择。</p><p>在v17使用了不同的机制生成组件调用栈，直接从 JavaScript 原生错误栈生成的，所以在生产环境也能按sourcemap 还原回来，且支持点击跳到源码位置。</p><p>想详细了解的可见该 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact%2Fpull%2F18561" title="https://github.com/facebook/react/pull/18561" target="_blank" rel="noreferrer">PR</a></p><h3 id="移除私有导出-api" tabindex="-1">移除私有导出 API <a class="header-anchor" href="#移除私有导出-api" aria-label="Permalink to &quot;移除私有导出 API&quot;">​</a></h3><p>v17 删除了一些私有 API，主要是 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fnecolas%2Freact-native-web" title="https://github.com/necolas/react-native-web" target="_blank" rel="noreferrer">React Native for Web</a> 使用的</p><p>另外，还删除了<code>ReactTestUtils.SimulateNative</code>工具方法，因为其行为与语义不符，如果你想要一种简便的方式来触发测试中原生浏览器的事件，可直接使用 <a href="https://link.juejin.cn/?target=https%3A%2F%2Ftesting-library.com%2Fdocs%2Fdom-testing-library%2Fapi-events" title="https://testing-library.com/docs/dom-testing-library/api-events" target="_blank" rel="noreferrer">React Testing Library</a></p><h3 id="启发式更新算法更新" tabindex="-1">启发式更新算法更新 <a class="header-anchor" href="#启发式更新算法更新" aria-label="Permalink to &quot;启发式更新算法更新&quot;">​</a></h3><p>引用 <a href="https://juejin.cn/post/6860275004597239815" title="https://juejin.cn/post/6860275004597239815" target="_blank" rel="noreferrer">React17新特性：启发式更新算法</a></p><ul><li>React16的<code>expirationTimes</code>模型只能区分是否&gt;=<code>expirationTimes</code>决定节点是否更新。</li><li>React17的<code>lanes</code>模型可以选定一个更新区间，并且动态的向区间中增减优先级，可以处理更细粒度的更新。</li></ul><p>这个我目前也不是太清楚具体算法，先不展开了有兴趣的可去查阅相关资料</p><h2 id="react-18-更新" tabindex="-1">React 18 更新 <a class="header-anchor" href="#react-18-更新" aria-label="Permalink to &quot;React 18 更新&quot;">​</a></h2><h3 id="并发模式" tabindex="-1">并发模式 <a class="header-anchor" href="#并发模式" aria-label="Permalink to &quot;并发模式&quot;">​</a></h3><p>v18的新特性是使用现代浏览器的特性构建的，彻底放弃对 IE 的支持。</p><p>v17 和 v18 的区别就是：从同步不可中断更新变成了异步可中断更新，v17可以通过一些试验性的API开启并发模式，而v18则全面开启并发模式。</p><blockquote><p>并发模式可帮助应用保持响应，并根据用户的设备性能和网速进行适当的调整，该模式通过使渲染可中断来修复阻塞渲染限制。在 Concurrent 模式中，React 可以同时更新多个状态。</p></blockquote><p>这里参考下文区分几个概念：</p><ul><li><strong>并发模式</strong>是实现<strong>并发更新</strong>的基本前提</li><li>v18 中，以是否使用<strong>并发特性</strong>作为是否开启<strong>并发更新</strong>的依据。</li><li><strong>并发特性</strong>指开启<strong>并发模式</strong>后才能使用的特性，比如：<code>useDeferredValue</code>/<code>useTransition</code></li></ul><p>可阅读参考 <a href="https://juejin.cn/post/7094037148088664078#heading-23" title="https://juejin.cn/post/7094037148088664078#heading-23" target="_blank" rel="noreferrer">Concurrent Mode（并发模式）</a></p><h3 id="更新-render-api" tabindex="-1">更新 render API <a class="header-anchor" href="#更新-render-api" aria-label="Permalink to &quot;更新 render API&quot;">​</a></h3><p>v18 使用 ReactDOM.createRoot() 创建一个新的根元素进行渲染，使用该 API，会自动启用并发模式。如果你升级到v18，但没有使用<code>ReactDOM.createRoot()</code>代替<code>ReactDOM.render()</code>时，控制台会打印错误日志要提醒你使用React，该警告也意味此项变更没有造成breaking change，而可以并存，当然尽量是不建议。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fa61c46feb94c8b9ff7e71542763b94~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// v17</span></span>
<span class="line"><span>import ReactDOM from &#39;react-dom&#39;</span></span>
<span class="line"><span>import App from &#39;./App&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ReactDOM.render(&lt;App /&gt;, document.getElementById(&#39;root&#39;))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// v18</span></span>
<span class="line"><span>import ReactDOM from &#39;react-dom/client&#39;</span></span>
<span class="line"><span>import App from &#39;./App&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ReactDOM.createRoot(document.getElementById(&#39;root&#39;) as HTMLElement).render(&lt;App /&gt;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="自动批处理" tabindex="-1">自动批处理 <a class="header-anchor" href="#自动批处理" aria-label="Permalink to &quot;自动批处理&quot;">​</a></h3><p>批处理是指 React 将多个状态更新，聚合到一次 render 中执行，以提升性能</p><p>在v17的批处理只会在事件处理函数中实现，而在Promise链、异步代码、原生事件处理函数中失效。而v18则所有的更新都会自动进行批处理。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// v17</span></span>
<span class="line"><span>const handleBatching = () =&gt; {</span></span>
<span class="line"><span>  // re-render 一次，这就是批处理的作用</span></span>
<span class="line"><span>  setCount((c) =&gt; c + 1)</span></span>
<span class="line"><span>  setFlag((f) =&gt; !f)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// re-render两次</span></span>
<span class="line"><span>setTimeout(() =&gt; {</span></span>
<span class="line"><span>   setCount((c) =&gt; c + 1)</span></span>
<span class="line"><span>   setFlag((f) =&gt; !f)</span></span>
<span class="line"><span>}, 0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// v18</span></span>
<span class="line"><span>const handleBatching = () =&gt; {</span></span>
<span class="line"><span>  // re-render 一次</span></span>
<span class="line"><span>  setCount((c) =&gt; c + 1)</span></span>
<span class="line"><span>  setFlag((f) =&gt; !f)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// 自动批处理：re-render 一次</span></span>
<span class="line"><span>setTimeout(() =&gt; {</span></span>
<span class="line"><span>   setCount((c) =&gt; c + 1)</span></span>
<span class="line"><span>   setFlag((f) =&gt; !f)</span></span>
<span class="line"><span>}, 0)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>如果在某些场景不想使用批处理，可以使用 <code>flushSync</code>退出批处理，强制同步执行更新。</p><blockquote><p>flushSync 会以函数为作用域，函数内部的多个 setState 仍然是批量更新</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const handleAutoBatching = () =&gt; {</span></span>
<span class="line"><span>  // 退出批处理</span></span>
<span class="line"><span>  flushSync(() =&gt; {</span></span>
<span class="line"><span>    setCount((c) =&gt; c + 1)</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>  flushSync(() =&gt; {</span></span>
<span class="line"><span>    setFlag((f) =&gt; !f)</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="suspense-支持-ssr" tabindex="-1">Suspense 支持 SSR <a class="header-anchor" href="#suspense-支持-ssr" aria-label="Permalink to &quot;Suspense 支持 SSR&quot;">​</a></h3><p>SSR 一次页面渲染的流程：</p><ol><li>服务器获取页面所需数据</li><li>将组件渲染成 HTML 形式作为响应返回</li><li>客户端加载资源</li><li>（hydrate）执行 JS，并生成页面最终内容</li></ol><p>上述流程是串行执行的，v18前的 SSR 有一个问题就是它不允许组件&quot;等待数据&quot;，必须收集好所有的数据，才能开始向客户端发送HTML。如果其中有一步比较慢，都会影响整体的渲染速度。</p><p>v18 中使用并发渲染特性扩展了<code>Suspense</code>的功能，使其支持流式 SSR，将 React 组件分解成更小的块，允许服务端一点一点返回页面，尽早发送 HTML和选择性的 hydrate， 从而可以使SSR更快的加载页面</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;Suspense fallback={&lt;Spinner /&gt;}&gt;</span></span>
<span class="line"><span>  &lt;Comments /&gt;</span></span>
<span class="line"><span>&lt;/Suspense&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>具体可参考文章 <a href="https://juejin.cn/post/6982010092258328583" title="https://juejin.cn/post/6982010092258328583" target="_blank" rel="noreferrer">React 18 中新的 Suspense SSR 架构</a></p><h3 id="starttransition" tabindex="-1">startTransition <a class="header-anchor" href="#starttransition" aria-label="Permalink to &quot;startTransition&quot;">​</a></h3><p>Transitions 是 React 18 引入的一个全新的并发特性。它允许你将标记更新作为一个 transitions（过渡），这会告诉 React 它们可以被中断执行，并避免回到已经可见内容的 Suspense 降级方案。本质上是用于一些不是很急迫的更新上，用来进行并发控制</p><p>在v18之前，所有的更新任务都被视为急迫的任务，而Concurrent Mode 模式能将渲染中断，可以让高优先级的任务先更新渲染。</p><p>React 的状态更新可以分为两类：</p><ul><li>紧急更新：比如点击按钮、搜索框打字是需要立即响应的行为，如果没有立即响应给用户的体验就是感觉卡顿延迟</li><li>过渡/非紧急更新：将 UI 从一个视图过渡到另一个视图。一些延迟可以接受的更新操作，不需要立即响应</li></ul><p><code>startTransition</code> API 允许将更新标记为非紧急事件处理，被<code>startTransition</code>包裹的会延迟更新的state，期间可能被其他紧急渲染所抢占。因为 React 会在高优先级更新渲染完成之后，才会渲染低优先级任务的更新</p><p>React 无法自动识别哪些更新是优先级更高的。比如用户的键盘输入操作后，setInputValue会立即更新用户的输入到界面上，是紧急更新。而setSearchQuery是根据用户输入，查询相应的内容，是非紧急的。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const [inputValue, setInputValue] = useState()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const onChange = (e)=&gt;{</span></span>
<span class="line"><span>  setInputValue(e.target.value) // 更新用户输入值（用户打字交互的优先级应该要更高）</span></span>
<span class="line"><span>  setSearchQuery(e.target.value)  // 更新搜索列表（可能有点延迟，影响）</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>return (</span></span>
<span class="line"><span>  &lt;input value={inputValue} onChange={onChange} /&gt;</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>React无法自动识别，所以它提供了 <code>startTransition</code>让我们手动指定哪些更新是紧急的，哪些是非紧急的，从而让我们改善用户交互体验。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 紧急的更新</span></span>
<span class="line"><span>setInputValue(e.target.value)</span></span>
<span class="line"><span>// 开启并发更新</span></span>
<span class="line"><span>startTransition(() =&gt; {</span></span>
<span class="line"><span>  setSearchQuery(input) // 非紧急的更新</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里有个比较好的<a href="https://link.juejin.cn/?target=https%3A%2F%2Freact-fractals-git-react-18-swizec.vercel.app%2F" title="https://react-fractals-git-react-18-swizec.vercel.app/" target="_blank" rel="noreferrer">在线例子</a>，可以直接感受到 <code>startTransition</code>的优化</p><h3 id="usetransition" tabindex="-1">useTransition <a class="header-anchor" href="#usetransition" aria-label="Permalink to &quot;useTransition&quot;">​</a></h3><p>当有过渡任务（非紧急更新）时，我们可能需要告诉用户什么时候当前处于 pending（过渡） 状态，因此v18提供了一个带有<code>isPending</code>标志的 Hook <code>useTransition</code>来跟踪 transition 状态，用于过渡期。</p><p><code>useTransition</code> 执行返回一个数组。数组有两个状态值：</p><ul><li><code>isPending</code>: 指处于过渡状态，正在加载中</li><li><code>startTransition</code>: 通过回调函数将状态更新包装起来告诉 React这是一个过渡任务，是一个低优先级的更新</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function TransitionTest() {</span></span>
<span class="line"><span>  const [isPending, startTransition] = useTransition()</span></span>
<span class="line"><span>  const [count, setCount] = useState(0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  function handleClick() {</span></span>
<span class="line"><span>    startTransition(() =&gt; {</span></span>
<span class="line"><span>      setCount((c) =&gt; c + 1)</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;div&gt;</span></span>
<span class="line"><span>      {isPending &amp;&amp; &lt;div&gt;spinner...&lt;/div&gt;}</span></span>
<span class="line"><span>      &lt;button onClick={handleClick}&gt;{count}&lt;/button&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>直观感觉这有点像 <code>setTimeout</code>，而防抖节流其实本质也是<code>setTimeout</code>，区别是防抖节流是控制了执行频率，让渲染次数减少了，而 v18的 transition 则没有减少渲染的次数。</p><h3 id="usedeferredvalue" tabindex="-1">useDeferredValue <a class="header-anchor" href="#usedeferredvalue" aria-label="Permalink to &quot;useDeferredValue&quot;">​</a></h3><p><code>useDeferredValue</code> 和 <code>useTransition</code> 一样，都是标记了一次非紧急更新。<code>useTransition</code>是处理一段逻辑，而<code>useDeferredValue</code>是产生一个新状态，它是延时状态，这个新的状态则叫 DeferredValue。所以使用<code>useDeferredValue</code>可以推迟状态的渲染</p><blockquote><p><code>useDeferredValue</code> 接受一个值，并返回该值的新副本，该副本将推迟到紧急更新之后。如果当前渲染是一个紧急更新的结果，比如用户输入，React 将返回之前的值，然后在紧急渲染完成后渲染新的值。</p></blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function Typeahead() {</span></span>
<span class="line"><span>  const query = useSearchQuery(&#39;&#39;);</span></span>
<span class="line"><span>  const deferredQuery = useDeferredValue(query);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // Memoizing 告诉 React 仅当 deferredQuery 改变，</span></span>
<span class="line"><span>  // 而不是 query 改变的时候才重新渲染</span></span>
<span class="line"><span>  const suggestions = useMemo(() =&gt;</span></span>
<span class="line"><span>    &lt;SearchSuggestions query={deferredQuery} /&gt;,</span></span>
<span class="line"><span>    [deferredQuery]</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;&gt;</span></span>
<span class="line"><span>      &lt;SearchInput query={query} /&gt;</span></span>
<span class="line"><span>      &lt;Suspense fallback=&quot;Loading results...&quot;&gt;</span></span>
<span class="line"><span>        {suggestions}</span></span>
<span class="line"><span>      &lt;/Suspense&gt;</span></span>
<span class="line"><span>    &lt;/&gt;</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>这样一看，<code>useDeferredValue</code>直观就是延迟显示状态，那用防抖节流有什么区别呢？</p><p>如果使用防抖节流，比如延迟300ms显示则意味着所有用户都要延时，在渲染内容较少、用户CPU性能较好的情况下也是会延迟300ms，而且你要根据实际情况来调整延迟的合适值；但是<code>useDeferredValue</code>是否延迟取决于计算机的性能。</p><ul><li>感兴趣可以看下这篇文章：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.bekk.christmas%2Fpost%2F2021%2F22%2Fusedeferredvalue-in-react-18" title="https://www.bekk.christmas/post/2021/22/usedeferredvalue-in-react-18" target="_blank" rel="noreferrer">usedeferredvalue-in-react-18</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fusedeferredvalue-example.netlify.app%2F" title="https://usedeferredvalue-example.netlify.app/" target="_blank" rel="noreferrer">在线例子</a></li></ul><h3 id="useid" tabindex="-1">useId <a class="header-anchor" href="#useid" aria-label="Permalink to &quot;useId&quot;">​</a></h3><p><code>useId</code>支持同一个组件在客户端和服务端生成相同的唯一的 ID，避免 hydration 的不匹配，原理就是每个 id 代表该组件在组件树中的层级结构。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function Checkbox() {</span></span>
<span class="line"><span>  const id = useId()</span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;&gt;</span></span>
<span class="line"><span>      &lt;label htmlFor={id}&gt;Do you like React?&lt;/label&gt;</span></span>
<span class="line"><span>      &lt;input id={id} type=&quot;checkbox&quot; name=&quot;react&quot; /&gt;</span></span>
<span class="line"><span>    &lt;/&gt;</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这里涉及到 SSR 部分知识，这里不展开了，可以阅读该篇文章理解：</p><ul><li><a href="https://juejin.cn/post/7034691251165200398" title="https://juejin.cn/post/7034691251165200398" target="_blank" rel="noreferrer">为了生成唯一id，React18专门引入了新Hook：useId</a></li></ul><h3 id="提供给第三方库的-hook" tabindex="-1">提供给第三方库的 Hook <a class="header-anchor" href="#提供给第三方库的-hook" aria-label="Permalink to &quot;提供给第三方库的 Hook&quot;">​</a></h3><p>这两个 Hook 日常开发基本用不到，简单带过</p><h4 id="usesyncexternalstore" tabindex="-1">useSyncExternalStore <a class="header-anchor" href="#usesyncexternalstore" aria-label="Permalink to &quot;useSyncExternalStore&quot;">​</a></h4><p><code>useSyncExternalStore</code> 一般是第三方状态管理库使用如 <code>Redux</code>。它通过强制的同步状态更新，使得外部 store 可以支持并发读取。它实现了对外部数据源订阅时不再需要 <code>useEffect</code></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const state = useSyncExternalStore(subscribe, getSnapshot[, getServerSnapshot]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="useinsertioneffect" tabindex="-1">useInsertionEffect <a class="header-anchor" href="#useinsertioneffect" aria-label="Permalink to &quot;useInsertionEffect&quot;">​</a></h4><p><code>useInsertionEffect</code> 仅限于 css-in-js 库使用。它允许 css-in-js 库解决在渲染中注入样式的性能问题。 执行时机在 <code>useLayoutEffect</code> 之前，只是此时不能使用ref和调度更新，一般用于提前注入样式。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>useInsertionEffect(() =&gt; {</span></span>
<span class="line"><span>    console.log(&#39;useInsertionEffect 执行&#39;)</span></span>
<span class="line"><span>}, [])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,136);function m(h,g,v,f,k,q){const e=a("ArticleMetadata"),p=a("ClientOnly");return t(),i("div",null,[b,s(p,null,{default:r(()=>[s(e)]),_:1}),d])}const C=l(u,[["render",m]]);export{y as __pageData,C as default};
